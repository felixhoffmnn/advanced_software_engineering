{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"HiBuddy A speech bot for your daily needs build during advanced software engineering at DHBW Stuttgart. GitHub \u00b7 CI/CD \u00b7 Dokumentation This project was built by a team of 5 students during the advanced software engineering course at DHBW Stuttgart . The goal was to create a bot that can interact using speech-to-text and text-to-speech with the user and perform tasks like a morning briefing, a helper for planning trips and events, and also to provide information about current sports events. Requirements & Usage Python 3.10 is required Following dependencies are listed which are required to either run or contribute to this project. Install portaudio for speech recognition: On Windows : Everything should be installed by default On macOS : brew install portaudio On Linux : sudo apt install python3-pyaudio Install Poetry Poetry is a dependency manager for Python used in this project (Optional) Setup poetry to use the local .venv folder by running poetry config virtualenvs.in-project true Run poetry install to install all dependencies - Afterwards, run poetry shell to activate the virtual environment Install the pre-commit hooks with poetry run pre-commit install Note: If you are using Poetry it is recommended to use poetry run <command> to run commands. This ensures that the .env file is loaded and the virtual environment is activated. After the setup is complete, use the following commands to run the agent. Note that you need to be in the root directory of the project. # If want to run the agent with the default settings poetry run python aswe/core/agent.py main # With this you can trigger a specific proactivity poetry run python aswe/core/agent.py main --test_proactivity 4 # If you want to get the microphone input poetry run python aswe/core/agent.py main -- --get_mic # If you want to trigger a specific proactivity and get the microphone input poetry run python aswe/core/agent.py main --test_proactivity 3 --get_mic API Tokens For Google Calendar you need to create the calendar_credentials.json file in the root folder. You can retrieve this file under the following link: Google Calendar - Interaction with the Google Calendar For the other APIs you need to create a .env file in the root folder. This needs to contain the following variables: WEATHER_API_KEY = ... EVENT_API_KEY = ... GOOGLE_MAPS_API_KEY = ... SOCCER_API_KEY = ... NEWS_API_KEY = ... SPORTS_API_KEY = ... FINANCE_API_KEY_1 = ... FINANCE_API_KEY_2 = ... To retrieve the API keys, you need to create an account on the following websites: Visual Crossing - Checks the weather forecast ( WEATHER_API_KEY ) Ticketmaster - Returns information about events and concerts ( EVENT_API_KEY ) Google Maps - Returns information about locations and navigation ( GOOGLE_MAPS_API_KEY ) Football Data - Returns information about football matches ( SOCCER_API_KEY ) News API - Returns information about news articles ( NEWS_API_KEY ) API-Sports - Returns information about basketball and handball matches ( SPORTS_API_KEY ) Financial Modeling Prep - Returns information about stock prices ( FINANCE_API_KEY_1 ) Alpha Vantage - Returns information about stock news sentiment ( FINANCE_API_KEY_2 ) Concept In the following section we will go into detail about the concept of the agent. The agent is divided into three main parts: the speech and text conversion , the agent , the use cases , and the API layer . CI/CD This project uses pre-commit to ensure a consistent code style before committing. This pipeline runs primarily before committing, but will also be triggered as CI/CD pipeline on GitHub using pre-commit.ci . The related files is named .pre-commit-config.yaml . This includes the following checks: Lock project dependencies and export requirements.txt Check common hooks (e.g., yaml, merge conflicts, case conflicts) Sort imports with isort Format code with black and flake8 Check typing with mypy Format markdown and yaml files with prettier Check for correct and new python styling with [pyupgrade]( After committing, the GitHub actions CI/CD pipeline will be triggered. The related files can be found in the .github/workflows folder. This includes the following checks: Run tests with pytest Calculates code coverage with pytest-cov and uploads it to Codecov Builds and deploys the MkDocs documentation (see here ) Checks code quality and security with CodeQL License This project is licensed under MIT .","title":"Readme"},{"location":"#requirements-usage","text":"Python 3.10 is required Following dependencies are listed which are required to either run or contribute to this project. Install portaudio for speech recognition: On Windows : Everything should be installed by default On macOS : brew install portaudio On Linux : sudo apt install python3-pyaudio Install Poetry Poetry is a dependency manager for Python used in this project (Optional) Setup poetry to use the local .venv folder by running poetry config virtualenvs.in-project true Run poetry install to install all dependencies - Afterwards, run poetry shell to activate the virtual environment Install the pre-commit hooks with poetry run pre-commit install Note: If you are using Poetry it is recommended to use poetry run <command> to run commands. This ensures that the .env file is loaded and the virtual environment is activated. After the setup is complete, use the following commands to run the agent. Note that you need to be in the root directory of the project. # If want to run the agent with the default settings poetry run python aswe/core/agent.py main # With this you can trigger a specific proactivity poetry run python aswe/core/agent.py main --test_proactivity 4 # If you want to get the microphone input poetry run python aswe/core/agent.py main -- --get_mic # If you want to trigger a specific proactivity and get the microphone input poetry run python aswe/core/agent.py main --test_proactivity 3 --get_mic","title":"Requirements &amp; Usage"},{"location":"#api-tokens","text":"For Google Calendar you need to create the calendar_credentials.json file in the root folder. You can retrieve this file under the following link: Google Calendar - Interaction with the Google Calendar For the other APIs you need to create a .env file in the root folder. This needs to contain the following variables: WEATHER_API_KEY = ... EVENT_API_KEY = ... GOOGLE_MAPS_API_KEY = ... SOCCER_API_KEY = ... NEWS_API_KEY = ... SPORTS_API_KEY = ... FINANCE_API_KEY_1 = ... FINANCE_API_KEY_2 = ... To retrieve the API keys, you need to create an account on the following websites: Visual Crossing - Checks the weather forecast ( WEATHER_API_KEY ) Ticketmaster - Returns information about events and concerts ( EVENT_API_KEY ) Google Maps - Returns information about locations and navigation ( GOOGLE_MAPS_API_KEY ) Football Data - Returns information about football matches ( SOCCER_API_KEY ) News API - Returns information about news articles ( NEWS_API_KEY ) API-Sports - Returns information about basketball and handball matches ( SPORTS_API_KEY ) Financial Modeling Prep - Returns information about stock prices ( FINANCE_API_KEY_1 ) Alpha Vantage - Returns information about stock news sentiment ( FINANCE_API_KEY_2 )","title":"API Tokens"},{"location":"#concept","text":"In the following section we will go into detail about the concept of the agent. The agent is divided into three main parts: the speech and text conversion , the agent , the use cases , and the API layer .","title":"Concept"},{"location":"#cicd","text":"This project uses pre-commit to ensure a consistent code style before committing. This pipeline runs primarily before committing, but will also be triggered as CI/CD pipeline on GitHub using pre-commit.ci . The related files is named .pre-commit-config.yaml . This includes the following checks: Lock project dependencies and export requirements.txt Check common hooks (e.g., yaml, merge conflicts, case conflicts) Sort imports with isort Format code with black and flake8 Check typing with mypy Format markdown and yaml files with prettier Check for correct and new python styling with [pyupgrade]( After committing, the GitHub actions CI/CD pipeline will be triggered. The related files can be found in the .github/workflows folder. This includes the following checks: Run tests with pytest Calculates code coverage with pytest-cov and uploads it to Codecov Builds and deploys the MkDocs documentation (see here ) Checks code quality and security with CodeQL","title":"CI/CD"},{"location":"#license","text":"This project is licensed under MIT .","title":"License"},{"location":"core/","text":"Core The core module contains the Agent , STT , TTS , as well as dataclasses related to the Agent . The Agent is responsible for the overall control flow of the application. It is the main entry point for the user and the main interface to the other modules. It also takes care of the proactivity of the application. Agent graph LR; start_agent --> greet_user; greet_user --> check_for_proactivity; check_for_proactivity --> trigger_proactivity; trigger_proactivity --> get_user_input; check_for_proactivity --> get_user_input; get_user_input --> calculate_best_match; calculate_best_match --> trigger_use_case; trigger_use_case --> check_for_proactivity; Agent ( get_mic = False ) Class to handle speech to handle main functionality of the assistant The core functionality of the assistant is to handle speech-to-text conversion ( stt ), text-to_speech ( tts ) conversion, calculate the best match for the parsed text, greet the user, trigger the right use case, and handle proactivity. Parameters: Name Type Description Default get_mic bool , optional Boolean if the speech to text class should first ask for the microphone to use. By default False . False Attributes: Name Type Description assistant_name str The name of the assistant quotes pd . DataFrame DataFrame storing the use cases and functionality combinations user User User class to store the user information (eg., name, age) stt SpeechToText Speech to text class to handle speech-to-text conversion tts TextToSpeech Text to speech class to handle text-to-speech conversion log_proactivity LogProactivity Log proactivity class to handle the logging of proactivity uc_general GeneralUseCase General use case class to handle general use cases uc_navigation NavigationUseCase Navigation use case class to handle navigation use cases uc_event EventUseCase Event use case class to handle event use cases uc_sport SportUseCase Sport use case class to handle sport use cases _check_proactivity ( test_proactivity = None ) Checks if there are any updates which should be announced to the user Checks every 60 seconds if there are any updates which should be announced to the user. There is an additional option to set a separate interval for each use case. Proactivity IDs The following table shows the IDs for the proactivity. ID Use Case 1 Event 2 Morning Briefing 3 Sport 4 Navigation Parameters: Name Type Description Default test_proactivity int | None, optional A integer between 1 and 5 which triggers the proactivity for the corresponding use case. None _evaluate_use_case ( parsed_text ) Evaluates the parsed text to trigger the correct use case Parameters: Name Type Description Default parsed_text str The voice input of the user parsed to lower case string required _get_best_match ( parsed_text , threshold = 0.7 ) Find the best match for the parsed text Function calculates the similarity between the parsed text and the use cases. TODO: Add tokenization and stop words TODO: Watch if the default threshold is too high self.quotes DataFrame The self.quotes consists of three columns: use_case , choice and phrase . We use the use_case and choice column for the chain-of-responsibility pattern to map the best match to the final function. The phrase column contains multiple phrases which are going to be compared to the parsed text. use_case choice phrase 0 morningBriefing newsSummary whats going on 1 morningBriefing newsSummary morning briefing 2 events eventSummary what is going on 3 navigation dhbw dhbw 4 navigation dhbw i need to get to the dhbw 5 navigation hpe i need to get to the hpe Parameters: Name Type Description Default parsed_text str The parsed text which should be matched to a use case. required threshold float , optional The threshold which is used to determine if the similarity is high enough to be considered. The value needs to be between 0 and 1. By default 0.7 . 0.7 Raises: Type Description ValueError If the threshold is not between 0 and 1. Returns: Type Description BestMatch Returns a object with the use case, the selected endpoint within the use case (choice), the similarity, and the parsed text. _greeting () Function to greet the user. Depending on the time of the day, the assistant greets the user with a different greeting. main ( test_proactivity = None ) Main function to interact with the user The agent function is the main function of the assistant. It first greets the user and then checks proactively if there are updates for the user. If thats not the case, it will start listening for user input in 60 second intervals. If the user input is not empty, it will execute the use case function for proactivity. The threading library seems to be not compatible with some python version ( documentation ). Therefore it will be removed and the agent will be executed in a single thread. TODO: Add hotword detection Parameters: Name Type Description Default test_proactivity int | None, optional A integer between 1 and 5 which triggers the proactivity for the corresponding use case. None User Interaction SpeechToText ( get_mic ) Class to convert speech to text. Initializes the speech to text class. TODO: Think about a better way to handle the case that the microphone_index is not required Parameters: Name Type Description Default get_mic bool If the speech to text class should first get the microphone index. required Attributes: Name Type Description recognizer sr . Recognizer The speech recognition object. microphone_index int | None The index of the microphone which should be used. check_if_yes () First gets the user input and then checks if the user said yes. TODO: Fix that yes is not recognized well Returns: Type Description bool Boolean if the user said yes. convert_audio_file ( audio_file ) Converts an audio file to text. TODO: For now this function is only for testing purposes Parameters: Name Type Description Default audio_file str | Path The path to the audio file which should be converted. required Returns: Type Description str | None The parsed text or None if the parsing failed. convert_speech ( line_above = False ) First records an audio file an then pareses it to text. When the function does not detect any speech for 60 seconds it will timeout and return None . TODO: Maybe use adjust_for_ambient_noise TODO: Add function to cancel the request without quitting the program Parameters: Name Type Description Default line_above bool , optional If a new line should be printed before the user input. By default False . False Returns: Type Description str | None The parsed text or None if no text could be parsed. TextToSpeech () Class to convert text to speech. Initializes the text to speech class. TODO: Add Attributes section Attributes: Name Type Description engine pyttsx3 . Engine The text to speech engine. convert_text ( text , optimize_time = True , optimize_numbers = True , line_above = False ) Converts text to speech Parameters: Name Type Description Default text str The Text which should be converted to speech. required optimize_time bool , optional If the time should be optimized for speech. Will replace 22:00 with 22 o'clock and 22:30 with 22 30 . By default True . True optimize_numbers bool , optional If the numbers should be optimized for speech. Will replace 22. with 22 . . By default True . True line_above bool , optional If a new line should be printed before the bot input. By default False . False optimize_text ( text , optimize_time , optimize_numbers ) Optimizes text with time indications (in HH:MM format) for speech. Parameters: Name Type Description Default text str The text which should be optimized. required optimize_time bool , optional If the time should be optimized for speech. Will replace 22:00 with 22 o'clock and 22:30 with 22 30 . By default True . required optimize_numbers bool , optional If the numbers should be optimized for speech. Will replace 22. with 22 . . By default True . required Returns: Type Description str The optimized text. Dataclasses Address dataclass Dataclass to store the address of a user. Attributes: Name Type Description street str The street of the user. city str The city of the user. zip_code int The zip code of the user. country str The country of the user. vvs_id str The VVS ID of the user. BestMatch dataclass Dataclass to store the best match for a given user input. Attributes: Name Type Description use_case str The name of the use case. function_key str The key of the function which should be called. similarity float The similarity between the user input and the best match. parsed_text str The parsed text from the user input. Favorites dataclass Dataclass to store the favorites of a user. For example the favorite stocks, sports teams, etc. Parameters: Name Type Description Default stocks list [ str ] The favorite stocks of the user. required league str The favorite league of the user. required team str The favorite team of the user. required news_country str The country the user wants to receive news from. required news_keywords list [ str ] The favorite news keywords of the user. required wakeup_time datetime The wakeup time of the user. required LogProactivity dataclass A class to keep track of the last time proactivity was triggered Attributes: Name Type Description last_check datetime The last time proactivity was triggered last_event_check datetime The last time the event use case was triggered last_morning_briefing_check datetime The last time the morning briefing was triggered last_wakeup_check datetime The last time the wakeup in morning briefing was triggered last_sport_check datetime The last time the sport use case was triggered last_navigation_check datetime The last time the navigation use case was triggered Possessions dataclass Dataclass to store the possessions of a user. Attributes: Name Type Description bike bool Does the user own a bike? car bool Does the user own a car? User dataclass Dataclass supposed to store the user data Attributes: Name Type Description name str The name of the user. age int The age of the user. address Address The address of the user. possessions Possessions The possessions of the user. favorites Favorites","title":"Core"},{"location":"core/#core","text":"The core module contains the Agent , STT , TTS , as well as dataclasses related to the Agent . The Agent is responsible for the overall control flow of the application. It is the main entry point for the user and the main interface to the other modules. It also takes care of the proactivity of the application.","title":"Core"},{"location":"core/#agent","text":"graph LR; start_agent --> greet_user; greet_user --> check_for_proactivity; check_for_proactivity --> trigger_proactivity; trigger_proactivity --> get_user_input; check_for_proactivity --> get_user_input; get_user_input --> calculate_best_match; calculate_best_match --> trigger_use_case; trigger_use_case --> check_for_proactivity;","title":"Agent"},{"location":"core/#aswe.core.agent.Agent","text":"Class to handle speech to handle main functionality of the assistant The core functionality of the assistant is to handle speech-to-text conversion ( stt ), text-to_speech ( tts ) conversion, calculate the best match for the parsed text, greet the user, trigger the right use case, and handle proactivity. Parameters: Name Type Description Default get_mic bool , optional Boolean if the speech to text class should first ask for the microphone to use. By default False . False Attributes: Name Type Description assistant_name str The name of the assistant quotes pd . DataFrame DataFrame storing the use cases and functionality combinations user User User class to store the user information (eg., name, age) stt SpeechToText Speech to text class to handle speech-to-text conversion tts TextToSpeech Text to speech class to handle text-to-speech conversion log_proactivity LogProactivity Log proactivity class to handle the logging of proactivity uc_general GeneralUseCase General use case class to handle general use cases uc_navigation NavigationUseCase Navigation use case class to handle navigation use cases uc_event EventUseCase Event use case class to handle event use cases uc_sport SportUseCase Sport use case class to handle sport use cases","title":"Agent"},{"location":"core/#aswe.core.agent.Agent._check_proactivity","text":"Checks if there are any updates which should be announced to the user Checks every 60 seconds if there are any updates which should be announced to the user. There is an additional option to set a separate interval for each use case. Proactivity IDs The following table shows the IDs for the proactivity. ID Use Case 1 Event 2 Morning Briefing 3 Sport 4 Navigation Parameters: Name Type Description Default test_proactivity int | None, optional A integer between 1 and 5 which triggers the proactivity for the corresponding use case. None","title":"_check_proactivity()"},{"location":"core/#aswe.core.agent.Agent._evaluate_use_case","text":"Evaluates the parsed text to trigger the correct use case Parameters: Name Type Description Default parsed_text str The voice input of the user parsed to lower case string required","title":"_evaluate_use_case()"},{"location":"core/#aswe.core.agent.Agent._get_best_match","text":"Find the best match for the parsed text Function calculates the similarity between the parsed text and the use cases. TODO: Add tokenization and stop words TODO: Watch if the default threshold is too high self.quotes DataFrame The self.quotes consists of three columns: use_case , choice and phrase . We use the use_case and choice column for the chain-of-responsibility pattern to map the best match to the final function. The phrase column contains multiple phrases which are going to be compared to the parsed text. use_case choice phrase 0 morningBriefing newsSummary whats going on 1 morningBriefing newsSummary morning briefing 2 events eventSummary what is going on 3 navigation dhbw dhbw 4 navigation dhbw i need to get to the dhbw 5 navigation hpe i need to get to the hpe Parameters: Name Type Description Default parsed_text str The parsed text which should be matched to a use case. required threshold float , optional The threshold which is used to determine if the similarity is high enough to be considered. The value needs to be between 0 and 1. By default 0.7 . 0.7 Raises: Type Description ValueError If the threshold is not between 0 and 1. Returns: Type Description BestMatch Returns a object with the use case, the selected endpoint within the use case (choice), the similarity, and the parsed text.","title":"_get_best_match()"},{"location":"core/#aswe.core.agent.Agent._greeting","text":"Function to greet the user. Depending on the time of the day, the assistant greets the user with a different greeting.","title":"_greeting()"},{"location":"core/#aswe.core.agent.Agent.main","text":"Main function to interact with the user The agent function is the main function of the assistant. It first greets the user and then checks proactively if there are updates for the user. If thats not the case, it will start listening for user input in 60 second intervals. If the user input is not empty, it will execute the use case function for proactivity. The threading library seems to be not compatible with some python version ( documentation ). Therefore it will be removed and the agent will be executed in a single thread. TODO: Add hotword detection Parameters: Name Type Description Default test_proactivity int | None, optional A integer between 1 and 5 which triggers the proactivity for the corresponding use case. None","title":"main()"},{"location":"core/#user-interaction","text":"","title":"User Interaction"},{"location":"core/#aswe.core.user_interaction.SpeechToText","text":"Class to convert speech to text. Initializes the speech to text class. TODO: Think about a better way to handle the case that the microphone_index is not required Parameters: Name Type Description Default get_mic bool If the speech to text class should first get the microphone index. required Attributes: Name Type Description recognizer sr . Recognizer The speech recognition object. microphone_index int | None The index of the microphone which should be used.","title":"SpeechToText"},{"location":"core/#aswe.core.user_interaction.SpeechToText.check_if_yes","text":"First gets the user input and then checks if the user said yes. TODO: Fix that yes is not recognized well Returns: Type Description bool Boolean if the user said yes.","title":"check_if_yes()"},{"location":"core/#aswe.core.user_interaction.SpeechToText.convert_audio_file","text":"Converts an audio file to text. TODO: For now this function is only for testing purposes Parameters: Name Type Description Default audio_file str | Path The path to the audio file which should be converted. required Returns: Type Description str | None The parsed text or None if the parsing failed.","title":"convert_audio_file()"},{"location":"core/#aswe.core.user_interaction.SpeechToText.convert_speech","text":"First records an audio file an then pareses it to text. When the function does not detect any speech for 60 seconds it will timeout and return None . TODO: Maybe use adjust_for_ambient_noise TODO: Add function to cancel the request without quitting the program Parameters: Name Type Description Default line_above bool , optional If a new line should be printed before the user input. By default False . False Returns: Type Description str | None The parsed text or None if no text could be parsed.","title":"convert_speech()"},{"location":"core/#aswe.core.user_interaction.TextToSpeech","text":"Class to convert text to speech. Initializes the text to speech class. TODO: Add Attributes section Attributes: Name Type Description engine pyttsx3 . Engine The text to speech engine.","title":"TextToSpeech"},{"location":"core/#aswe.core.user_interaction.TextToSpeech.convert_text","text":"Converts text to speech Parameters: Name Type Description Default text str The Text which should be converted to speech. required optimize_time bool , optional If the time should be optimized for speech. Will replace 22:00 with 22 o'clock and 22:30 with 22 30 . By default True . True optimize_numbers bool , optional If the numbers should be optimized for speech. Will replace 22. with 22 . . By default True . True line_above bool , optional If a new line should be printed before the bot input. By default False . False","title":"convert_text()"},{"location":"core/#aswe.core.user_interaction.TextToSpeech.optimize_text","text":"Optimizes text with time indications (in HH:MM format) for speech. Parameters: Name Type Description Default text str The text which should be optimized. required optimize_time bool , optional If the time should be optimized for speech. Will replace 22:00 with 22 o'clock and 22:30 with 22 30 . By default True . required optimize_numbers bool , optional If the numbers should be optimized for speech. Will replace 22. with 22 . . By default True . required Returns: Type Description str The optimized text.","title":"optimize_text()"},{"location":"core/#dataclasses","text":"","title":"Dataclasses"},{"location":"core/#aswe.core.objects.Address","text":"Dataclass to store the address of a user. Attributes: Name Type Description street str The street of the user. city str The city of the user. zip_code int The zip code of the user. country str The country of the user. vvs_id str The VVS ID of the user.","title":"Address"},{"location":"core/#aswe.core.objects.BestMatch","text":"Dataclass to store the best match for a given user input. Attributes: Name Type Description use_case str The name of the use case. function_key str The key of the function which should be called. similarity float The similarity between the user input and the best match. parsed_text str The parsed text from the user input.","title":"BestMatch"},{"location":"core/#aswe.core.objects.Favorites","text":"Dataclass to store the favorites of a user. For example the favorite stocks, sports teams, etc. Parameters: Name Type Description Default stocks list [ str ] The favorite stocks of the user. required league str The favorite league of the user. required team str The favorite team of the user. required news_country str The country the user wants to receive news from. required news_keywords list [ str ] The favorite news keywords of the user. required wakeup_time datetime The wakeup time of the user. required","title":"Favorites"},{"location":"core/#aswe.core.objects.LogProactivity","text":"A class to keep track of the last time proactivity was triggered Attributes: Name Type Description last_check datetime The last time proactivity was triggered last_event_check datetime The last time the event use case was triggered last_morning_briefing_check datetime The last time the morning briefing was triggered last_wakeup_check datetime The last time the wakeup in morning briefing was triggered last_sport_check datetime The last time the sport use case was triggered last_navigation_check datetime The last time the navigation use case was triggered","title":"LogProactivity"},{"location":"core/#aswe.core.objects.Possessions","text":"Dataclass to store the possessions of a user. Attributes: Name Type Description bike bool Does the user own a bike? car bool Does the user own a car?","title":"Possessions"},{"location":"core/#aswe.core.objects.User","text":"Dataclass supposed to store the user data Attributes: Name Type Description name str The name of the user. age int The age of the user. address Address The address of the user. possessions Possessions The possessions of the user. favorites Favorites","title":"User"},{"location":"license/","text":"MIT License Copyright (c) 2022 Felix Hoffmann, Leopold Fuchs, Maxime Fritzsch, Nick Schroeder, and Stephan Auf der Landwehr Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"utils/","text":"Utilities The utils folder contains all the helper functions and classes used in the project. Those are mainly used to abstract away the complexity of the underlying libraries and to provide a consistent interface. Additionally, this reduces the overall redundancy of the code. Abstract Classes Abstract classes are used to provide a consistent interface for the different libraries used in the project. One example is the abstraction of each individual use case class. AbstractUseCase ( stt , tts , assistant_name , user ) Bases: ABC Abstract class for use cases Use case constructor to provide objects from the parent agent class TODO: Add Attributes section Parameters: Name Type Description Default stt SpeechToText The speech to text object required tts TextToSpeech The text to speech object required assistant_name str The name of the assistant required user User User preference information required check_proactivity () abstractmethod Abstract method for use case classes Checks apis if certain events have occurred and informs user. Raises: Type Description NotImplementedError If the given key was not found in the match case statement for implemented functions, or if the function is not implemented yet. trigger_assistant ( best_match ) abstractmethod Abstract method for use case classes Handles business logic and communication between user and apis depending on user input. Parameters: Name Type Description Default best_match BestMatch An object containing the best match for the user input. required Raises: Type Description NotImplementedError If the given key was not found in the match case statement for implemented functions, or if the function is not implemented yet. Date The date module contains helper functions to work with dates and times. check_timedelta ( last_trigger , delta ) Calculate the time difference between the last trigger and the current time. If the time difference is greater than the given delta, return True , else False . Parameters: Name Type Description Default last_trigger datetime The last time when the proactivity was triggered required delta int The interval in minutes required Returns: Type Description bool If the time difference is greater than the given delta, return True , else False get_next_saturday () Get next Saturday relative to today. Returns Saturday of current week if today is either a working day or Saturday. Returns next week's Saturday if today is a Sunday. Returns: Type Description datetime . datetime Next Saturday validate_date ( date , include_time = None ) Validates Time format for either YYYY-MM-DD or YYYY-MM-DDThh:mm:ss Parameters: Name Type Description Default date str Date as type string that should be checked required include_time bool | None, optional Whether date should include time. If None methods tries finding correct type. By default None . None Returns: Name Type Description bool bool Whether date is valid. Error This project even includes custom error classes for raising exceptions specific to this project. ApiLimitReached Bases: Exception Define an exception for when the API limit is reached. TooManyRequests Bases: Exception Define an exception for when too many requests are made. Requests http_request ( url , headers = None , timeout = 10 ) Send a HTTP request to the given URL and return the response. Parameters: Name Type Description Default url str The URL of the API. required headers dict [ Any , Any ] | None, optional The headers to send with the request. By default None . None timeout int , optional The time in seconds to wait for a response. _By default 10 . 10 Returns: Type Description Response | None The response from the API or None if the request failed. validate_api ( response ) Test if the API limit is reached Parameters: Name Type Description Default response Response Response of the API request required Returns: Type Description bool Return True if the API limit is reached Shell This module contains helper functions to execute shell commands. For example, to clear the terminal. clear_shell () Clears any previous text in the shell get_int ( options , start = 1 ) Gets an integer from the user Parameters: Name Type Description Default options list [ int ] The list of options to choose from required start int , optional The starting index of the options. This feature is useful if you also use the print_options function. By default 1 . 1 Returns: Type Description int | None Returns the integer if it is in the list of options, otherwise returns None Raises: Type Description ValueError If the input was invalid, but the error is caught within the function print_options ( options ) Prints a list of options to the shell Parameters: Name Type Description Default options list [ str | int ] The list of options to print required Text calculate_similarity ( parsed_text , options ) Calculates the similarity between the parsed text and all options. Returns the highest similarity. Parameters: Name Type Description Default parsed_text str The parsed text from the user input. required options list [ str ] | str The options which should be compared with the parsed text. required Returns: Type Description float If a list of options is given, the highest similarity is returned. Else the similarity of the parsed text and the option is returned.","title":"Utilities"},{"location":"utils/#utilities","text":"The utils folder contains all the helper functions and classes used in the project. Those are mainly used to abstract away the complexity of the underlying libraries and to provide a consistent interface. Additionally, this reduces the overall redundancy of the code.","title":"Utilities"},{"location":"utils/#abstract-classes","text":"Abstract classes are used to provide a consistent interface for the different libraries used in the project. One example is the abstraction of each individual use case class.","title":"Abstract Classes"},{"location":"utils/#aswe.utils.abstract.AbstractUseCase","text":"Bases: ABC Abstract class for use cases Use case constructor to provide objects from the parent agent class TODO: Add Attributes section Parameters: Name Type Description Default stt SpeechToText The speech to text object required tts TextToSpeech The text to speech object required assistant_name str The name of the assistant required user User User preference information required","title":"AbstractUseCase"},{"location":"utils/#aswe.utils.abstract.AbstractUseCase.check_proactivity","text":"Abstract method for use case classes Checks apis if certain events have occurred and informs user. Raises: Type Description NotImplementedError If the given key was not found in the match case statement for implemented functions, or if the function is not implemented yet.","title":"check_proactivity()"},{"location":"utils/#aswe.utils.abstract.AbstractUseCase.trigger_assistant","text":"Abstract method for use case classes Handles business logic and communication between user and apis depending on user input. Parameters: Name Type Description Default best_match BestMatch An object containing the best match for the user input. required Raises: Type Description NotImplementedError If the given key was not found in the match case statement for implemented functions, or if the function is not implemented yet.","title":"trigger_assistant()"},{"location":"utils/#date","text":"The date module contains helper functions to work with dates and times.","title":"Date"},{"location":"utils/#aswe.utils.date.check_timedelta","text":"Calculate the time difference between the last trigger and the current time. If the time difference is greater than the given delta, return True , else False . Parameters: Name Type Description Default last_trigger datetime The last time when the proactivity was triggered required delta int The interval in minutes required Returns: Type Description bool If the time difference is greater than the given delta, return True , else False","title":"check_timedelta()"},{"location":"utils/#aswe.utils.date.get_next_saturday","text":"Get next Saturday relative to today. Returns Saturday of current week if today is either a working day or Saturday. Returns next week's Saturday if today is a Sunday. Returns: Type Description datetime . datetime Next Saturday","title":"get_next_saturday()"},{"location":"utils/#aswe.utils.date.validate_date","text":"Validates Time format for either YYYY-MM-DD or YYYY-MM-DDThh:mm:ss Parameters: Name Type Description Default date str Date as type string that should be checked required include_time bool | None, optional Whether date should include time. If None methods tries finding correct type. By default None . None Returns: Name Type Description bool bool Whether date is valid.","title":"validate_date()"},{"location":"utils/#error","text":"This project even includes custom error classes for raising exceptions specific to this project.","title":"Error"},{"location":"utils/#aswe.utils.error.ApiLimitReached","text":"Bases: Exception Define an exception for when the API limit is reached.","title":"ApiLimitReached"},{"location":"utils/#aswe.utils.error.TooManyRequests","text":"Bases: Exception Define an exception for when too many requests are made.","title":"TooManyRequests"},{"location":"utils/#requests","text":"","title":"Requests"},{"location":"utils/#aswe.utils.request.http_request","text":"Send a HTTP request to the given URL and return the response. Parameters: Name Type Description Default url str The URL of the API. required headers dict [ Any , Any ] | None, optional The headers to send with the request. By default None . None timeout int , optional The time in seconds to wait for a response. _By default 10 . 10 Returns: Type Description Response | None The response from the API or None if the request failed.","title":"http_request()"},{"location":"utils/#aswe.utils.request.validate_api","text":"Test if the API limit is reached Parameters: Name Type Description Default response Response Response of the API request required Returns: Type Description bool Return True if the API limit is reached","title":"validate_api()"},{"location":"utils/#shell","text":"This module contains helper functions to execute shell commands. For example, to clear the terminal.","title":"Shell"},{"location":"utils/#aswe.utils.shell.clear_shell","text":"Clears any previous text in the shell","title":"clear_shell()"},{"location":"utils/#aswe.utils.shell.get_int","text":"Gets an integer from the user Parameters: Name Type Description Default options list [ int ] The list of options to choose from required start int , optional The starting index of the options. This feature is useful if you also use the print_options function. By default 1 . 1 Returns: Type Description int | None Returns the integer if it is in the list of options, otherwise returns None Raises: Type Description ValueError If the input was invalid, but the error is caught within the function","title":"get_int()"},{"location":"utils/#aswe.utils.shell.print_options","text":"Prints a list of options to the shell Parameters: Name Type Description Default options list [ str | int ] The list of options to print required","title":"print_options()"},{"location":"utils/#text","text":"","title":"Text"},{"location":"utils/#aswe.utils.text.calculate_similarity","text":"Calculates the similarity between the parsed text and all options. Returns the highest similarity. Parameters: Name Type Description Default parsed_text str The parsed text from the user input. required options list [ str ] | str The options which should be compared with the parsed text. required Returns: Type Description float If a list of options is given, the highest similarity is returned. Else the similarity of the parsed text and the option is returned.","title":"calculate_similarity()"},{"location":"api/calendar/","text":"Calendar Event dataclass Dataclass storing Event data Attributes: Name Type Description title str The title of the event description str The description of the event location str The location the event takes place full_day bool Stores if the event is active the entire day date str The date of a full-day event with the format yyyy-MM-dd start_time str The start time of a non-full-day event with the format yyyy-MM-ddTHH:mm:ss+01:00 end_time str The end time of a non-full-day event with the format yyyy-MM-ddTHH:mm:ss+01:00 date : str class-attribute The date of a full-day event with the format yyyy-MM-dd end_time : str class-attribute The end time of a non-full-day event with the format yyyy-MM-ddTHH:mm:ss+01:00 start_time : str class-attribute The start time of a non-full-day event with the format yyyy-MM-ddTHH:mm:ss+01:00 create_event ( event_info ) Creates Event in Google Calendar Parameters: Name Type Description Default event_info Event Information about the event that is created required get_all_events_today () Provides list of all events happening today Returns: Type Description list [ Event ] List of all events happening today get_calendar_service () Provides a Resource object to interact with the Google Calendar API Returns: Type Description Any Resource for interacting with Google Calendar get_events_by_timeframe ( min_timestamp , max_timestamp ) Provides all events inside timeframe Parameters: Name Type Description Default min_timestamp str Lower timestamp in timeframe with format yyyy-MM-ddTHH:mm:ss.ffffffZ required max_timestamp str Higher timestamp in timeframe with format yyyy-MM-ddTHH:mm:ss.ffffffZ required Returns: Type Description list [ Event ] List of all events inside timeframe get_next_event_today () Provides the next event happening today Returns: Type Description Event | None Next event happening today if one exists","title":"Calendar"},{"location":"api/calendar/#calendar","text":"","title":"Calendar"},{"location":"api/calendar/#aswe.api.calendar.Event","text":"Dataclass storing Event data Attributes: Name Type Description title str The title of the event description str The description of the event location str The location the event takes place full_day bool Stores if the event is active the entire day date str The date of a full-day event with the format yyyy-MM-dd start_time str The start time of a non-full-day event with the format yyyy-MM-ddTHH:mm:ss+01:00 end_time str The end time of a non-full-day event with the format yyyy-MM-ddTHH:mm:ss+01:00","title":"Event"},{"location":"api/calendar/#aswe.api.calendar.Event.date","text":"The date of a full-day event with the format yyyy-MM-dd","title":"date"},{"location":"api/calendar/#aswe.api.calendar.Event.end_time","text":"The end time of a non-full-day event with the format yyyy-MM-ddTHH:mm:ss+01:00","title":"end_time"},{"location":"api/calendar/#aswe.api.calendar.Event.start_time","text":"The start time of a non-full-day event with the format yyyy-MM-ddTHH:mm:ss+01:00","title":"start_time"},{"location":"api/calendar/#aswe.api.calendar.create_event","text":"Creates Event in Google Calendar Parameters: Name Type Description Default event_info Event Information about the event that is created required","title":"create_event()"},{"location":"api/calendar/#aswe.api.calendar.get_all_events_today","text":"Provides list of all events happening today Returns: Type Description list [ Event ] List of all events happening today","title":"get_all_events_today()"},{"location":"api/calendar/#aswe.api.calendar.get_calendar_service","text":"Provides a Resource object to interact with the Google Calendar API Returns: Type Description Any Resource for interacting with Google Calendar","title":"get_calendar_service()"},{"location":"api/calendar/#aswe.api.calendar.get_events_by_timeframe","text":"Provides all events inside timeframe Parameters: Name Type Description Default min_timestamp str Lower timestamp in timeframe with format yyyy-MM-ddTHH:mm:ss.ffffffZ required max_timestamp str Higher timestamp in timeframe with format yyyy-MM-ddTHH:mm:ss.ffffffZ required Returns: Type Description list [ Event ] List of all events inside timeframe","title":"get_events_by_timeframe()"},{"location":"api/calendar/#aswe.api.calendar.get_next_event_today","text":"Provides the next event happening today Returns: Type Description Event | None Next event happening today if one exists","title":"get_next_event_today()"},{"location":"api/event/","text":"Events Event events ( query_params ) Retrieves Events that fulfil given query parameters Parameters: Name Type Description Default query_params EventApiEventParams Query Parameters API should filter for. required Returns: Type Description list [ ReducedEvent ] | None List of events Enums & Dataclasses EventApiEventParams dataclass Query Params Dataclass for Event API requests attraction_id : str | None = None class-attribute Filter by attraction id city : list [ str ] | None = None class-attribute Filter by city classification_id : list [ str ] | None = None class-attribute Filter by classification id: id of any segment, genre, sub-genre, type, sub-type. Negative filtering is supported by using the following format '-'. Be aware that negative filters may cause decreased performance. classification_name : list [ str ] | None = None class-attribute Filter by classification name: name of any segment, genre, sub-genre, type, sub-type. Negative filtering is supported by using the following format '-'. Be aware that negative filters may cause decreased performance. country_code : str | None = None class-attribute Filter by country code end_date_time : str | None = None class-attribute Filter with a start date before this date geo_point : str | None = None class-attribute Filter events by geoHash id : str | None = None class-attribute Filter entities by its id include_family : bool | None = None class-attribute Filter by classification that are family-friendly. Defaults to yes. keyword : str | None = None class-attribute Keyword to search on locale : list [ str ] = field ( default_factory = lambda : [ 'de' ]) class-attribute The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only en or fr ) then the first matching locale is used. When using a * it matches all locales. * can only be used at the end (e.g. en-us,en,* ). Defaults to [\"de\"] . page : int | None = None class-attribute Page number. Defaults to 0. postal_code : str | None = None class-attribute Filter by postal code / zipcode radius : int | None = None class-attribute Radius of the area in which we want to search for events. size : int | None = None class-attribute Page size of the response. Defaults to 20. sort : SortEnum | None = None class-attribute Sorting order of the search result. Allowable Values: name,asc , name,desc , relevance,asc , relevance,desc , distance,asc , distance,desc , random . Defaults to relevance,desc start_date_time : str | None = None class-attribute Filter with a start date after this date state_code : str | None = None class-attribute Filter by state code unit : UnitEnum = UnitEnum . KILOMETER class-attribute Unit of the radius. Defaults to km venue_id : str | None = None class-attribute Filter by venue id concat_to_query () Concatenates all fields to a string so that query can be appended to the request url Assumes all query fields were validated before, using validate_fields class method. validate_fields () Validates fields SortEnum Bases: str , Enum Enum of possible sort by values DISTANCE_ASC = 'distance,asc' class-attribute Sorting by distance in ascending order DISTANCE_DESC = 'distance,desc' class-attribute Sorting by distance in descending order NAME_ASC = 'name,asc' class-attribute Sorting by name in ascending order NAME_DESC = 'name,desc' class-attribute Sorting by name in descending order RELEVANCE_ASC = 'relevance,asc' class-attribute Sorting by relevance in ascending order RELEVANCE_DESC = 'relevance,desc' class-attribute Sorting by relevance in descending order UnitEnum Bases: str , Enum Enum of possible radius values for Event API Params KILOMETER = 'km' class-attribute Event search radius in kilometers MILES = 'miles' class-attribute Event search radius in miles","title":"Event"},{"location":"api/event/#events","text":"","title":"Events"},{"location":"api/event/#event","text":"","title":"Event"},{"location":"api/event/#aswe.api.event.event.events","text":"Retrieves Events that fulfil given query parameters Parameters: Name Type Description Default query_params EventApiEventParams Query Parameters API should filter for. required Returns: Type Description list [ ReducedEvent ] | None List of events","title":"events()"},{"location":"api/event/#enums-dataclasses","text":"","title":"Enums &amp; Dataclasses"},{"location":"api/event/#aswe.api.event.event_params.EventApiEventParams","text":"Query Params Dataclass for Event API requests","title":"EventApiEventParams"},{"location":"api/event/#aswe.api.event.event_params.EventApiEventParams.attraction_id","text":"Filter by attraction id","title":"attraction_id"},{"location":"api/event/#aswe.api.event.event_params.EventApiEventParams.city","text":"Filter by city","title":"city"},{"location":"api/event/#aswe.api.event.event_params.EventApiEventParams.classification_id","text":"Filter by classification id: id of any segment, genre, sub-genre, type, sub-type. Negative filtering is supported by using the following format '-'. Be aware that negative filters may cause decreased performance.","title":"classification_id"},{"location":"api/event/#aswe.api.event.event_params.EventApiEventParams.classification_name","text":"Filter by classification name: name of any segment, genre, sub-genre, type, sub-type. Negative filtering is supported by using the following format '-'. Be aware that negative filters may cause decreased performance.","title":"classification_name"},{"location":"api/event/#aswe.api.event.event_params.EventApiEventParams.country_code","text":"Filter by country code","title":"country_code"},{"location":"api/event/#aswe.api.event.event_params.EventApiEventParams.end_date_time","text":"Filter with a start date before this date","title":"end_date_time"},{"location":"api/event/#aswe.api.event.event_params.EventApiEventParams.geo_point","text":"Filter events by geoHash","title":"geo_point"},{"location":"api/event/#aswe.api.event.event_params.EventApiEventParams.id","text":"Filter entities by its id","title":"id"},{"location":"api/event/#aswe.api.event.event_params.EventApiEventParams.include_family","text":"Filter by classification that are family-friendly. Defaults to yes.","title":"include_family"},{"location":"api/event/#aswe.api.event.event_params.EventApiEventParams.keyword","text":"Keyword to search on","title":"keyword"},{"location":"api/event/#aswe.api.event.event_params.EventApiEventParams.locale","text":"The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only en or fr ) then the first matching locale is used. When using a * it matches all locales. * can only be used at the end (e.g. en-us,en,* ). Defaults to [\"de\"] .","title":"locale"},{"location":"api/event/#aswe.api.event.event_params.EventApiEventParams.page","text":"Page number. Defaults to 0.","title":"page"},{"location":"api/event/#aswe.api.event.event_params.EventApiEventParams.postal_code","text":"Filter by postal code / zipcode","title":"postal_code"},{"location":"api/event/#aswe.api.event.event_params.EventApiEventParams.radius","text":"Radius of the area in which we want to search for events.","title":"radius"},{"location":"api/event/#aswe.api.event.event_params.EventApiEventParams.size","text":"Page size of the response. Defaults to 20.","title":"size"},{"location":"api/event/#aswe.api.event.event_params.EventApiEventParams.sort","text":"Sorting order of the search result. Allowable Values: name,asc , name,desc , relevance,asc , relevance,desc , distance,asc , distance,desc , random . Defaults to relevance,desc","title":"sort"},{"location":"api/event/#aswe.api.event.event_params.EventApiEventParams.start_date_time","text":"Filter with a start date after this date","title":"start_date_time"},{"location":"api/event/#aswe.api.event.event_params.EventApiEventParams.state_code","text":"Filter by state code","title":"state_code"},{"location":"api/event/#aswe.api.event.event_params.EventApiEventParams.unit","text":"Unit of the radius. Defaults to km","title":"unit"},{"location":"api/event/#aswe.api.event.event_params.EventApiEventParams.venue_id","text":"Filter by venue id","title":"venue_id"},{"location":"api/event/#aswe.api.event.event_params.EventApiEventParams.concat_to_query","text":"Concatenates all fields to a string so that query can be appended to the request url Assumes all query fields were validated before, using validate_fields class method.","title":"concat_to_query()"},{"location":"api/event/#aswe.api.event.event_params.EventApiEventParams.validate_fields","text":"Validates fields","title":"validate_fields()"},{"location":"api/event/#aswe.api.event.event_params.SortEnum","text":"Bases: str , Enum Enum of possible sort by values","title":"SortEnum"},{"location":"api/event/#aswe.api.event.event_params.SortEnum.DISTANCE_ASC","text":"Sorting by distance in ascending order","title":"DISTANCE_ASC"},{"location":"api/event/#aswe.api.event.event_params.SortEnum.DISTANCE_DESC","text":"Sorting by distance in descending order","title":"DISTANCE_DESC"},{"location":"api/event/#aswe.api.event.event_params.SortEnum.NAME_ASC","text":"Sorting by name in ascending order","title":"NAME_ASC"},{"location":"api/event/#aswe.api.event.event_params.SortEnum.NAME_DESC","text":"Sorting by name in descending order","title":"NAME_DESC"},{"location":"api/event/#aswe.api.event.event_params.SortEnum.RELEVANCE_ASC","text":"Sorting by relevance in ascending order","title":"RELEVANCE_ASC"},{"location":"api/event/#aswe.api.event.event_params.SortEnum.RELEVANCE_DESC","text":"Sorting by relevance in descending order","title":"RELEVANCE_DESC"},{"location":"api/event/#aswe.api.event.event_params.UnitEnum","text":"Bases: str , Enum Enum of possible radius values for Event API Params","title":"UnitEnum"},{"location":"api/event/#aswe.api.event.event_params.UnitEnum.KILOMETER","text":"Event search radius in kilometers","title":"KILOMETER"},{"location":"api/event/#aswe.api.event.event_params.UnitEnum.MILES","text":"Event search radius in miles","title":"MILES"},{"location":"api/finance/","text":"Finance _get_percentage_change ( change ) Returns a formatted percentage change string. Parameters: Name Type Description Default change str The percentage change as a string. required Returns: Type Description str The formatted percentage change string. get_currency_by_country ( country ) Returns the currency and the currency symbol for a given country. Parameters: Name Type Description Default country str The country for which the currency should be returned. required Returns: Type Description Tuple [ str , str ] A tuple containing the currency and the currency symbol. get_news_info_by_symbol ( symbol ) Returns the latest news for a given symbol. Parameters: Name Type Description Default symbol str The symbol for which the latest news should be returned. required Returns: Type Description list [ list [ dict [ str , str ]]] | None The three most relevant news in the last 24h for the given symbol. get_stock_price ( symbol , currency = 'USD' ) Returns the current stock price for a given symbol. Parameters: Name Type Description Default symbol str The symbol for which the stock price should be returned. required currency str , optional The currency in which the stock price should be returned. By default USD . 'USD' Returns: Type Description float | None The current stock price for the given symbol. get_stock_price_change ( symbol ) Returns the current stock price change for a given symbol. Parameters: Name Type Description Default symbol str The symbol for which the stock price change should be returned. required Returns: Type Description dict [ str , str ] | None The current stock price change (per day and per 5 days) for the given symbol. get_stock_rating ( symbol ) Returns the current stock rating for a given symbol. Parameters: Name Type Description Default symbol str The symbol for which the stock rating should be returned. required Returns: Type Description str | None The current stock rating for the given symbol. get_ticker_by_symbol ( ticker_list , symbol ) Returns the ticker data for a given symbol. Parameters: Name Type Description Default ticker_list list [ dict [ str , str ]] The list of ticker data from a news source. required symbol str The symbol for which the ticker data should be returned. required Returns: Type Description dict [ str , str ] The ticker data for the given symbol.","title":"Finance"},{"location":"api/finance/#finance","text":"","title":"Finance"},{"location":"api/finance/#aswe.api.finance._get_percentage_change","text":"Returns a formatted percentage change string. Parameters: Name Type Description Default change str The percentage change as a string. required Returns: Type Description str The formatted percentage change string.","title":"_get_percentage_change()"},{"location":"api/finance/#aswe.api.finance.get_currency_by_country","text":"Returns the currency and the currency symbol for a given country. Parameters: Name Type Description Default country str The country for which the currency should be returned. required Returns: Type Description Tuple [ str , str ] A tuple containing the currency and the currency symbol.","title":"get_currency_by_country()"},{"location":"api/finance/#aswe.api.finance.get_news_info_by_symbol","text":"Returns the latest news for a given symbol. Parameters: Name Type Description Default symbol str The symbol for which the latest news should be returned. required Returns: Type Description list [ list [ dict [ str , str ]]] | None The three most relevant news in the last 24h for the given symbol.","title":"get_news_info_by_symbol()"},{"location":"api/finance/#aswe.api.finance.get_stock_price","text":"Returns the current stock price for a given symbol. Parameters: Name Type Description Default symbol str The symbol for which the stock price should be returned. required currency str , optional The currency in which the stock price should be returned. By default USD . 'USD' Returns: Type Description float | None The current stock price for the given symbol.","title":"get_stock_price()"},{"location":"api/finance/#aswe.api.finance.get_stock_price_change","text":"Returns the current stock price change for a given symbol. Parameters: Name Type Description Default symbol str The symbol for which the stock price change should be returned. required Returns: Type Description dict [ str , str ] | None The current stock price change (per day and per 5 days) for the given symbol.","title":"get_stock_price_change()"},{"location":"api/finance/#aswe.api.finance.get_stock_rating","text":"Returns the current stock rating for a given symbol. Parameters: Name Type Description Default symbol str The symbol for which the stock rating should be returned. required Returns: Type Description str | None The current stock rating for the given symbol.","title":"get_stock_rating()"},{"location":"api/finance/#aswe.api.finance.get_ticker_by_symbol","text":"Returns the ticker data for a given symbol. Parameters: Name Type Description Default ticker_list list [ dict [ str , str ]] The list of ticker data from a news source. required symbol str The symbol for which the ticker data should be returned. required Returns: Type Description dict [ str , str ] The ticker data for the given symbol.","title":"get_ticker_by_symbol()"},{"location":"api/navigation/","text":"Navigation Connection dataclass Dataclass supposed to store the data of a single vvs connection Attributes: Name Type Description train_name str Name of the train start_location str Name of the starting location start_time datetime Departure time of the train end_lcocation str Name of the end location end_time datetime Arrival time of the train MapsTrip dataclass Dataclass supposed to store the data of a connection retrieved from google maps Attributes: Name Type Description duration int Duration in minutes distance int Distance in meters MapsTripMode Bases: str , Enum Enum for google maps api trip modes Trip dataclass Dataclass supposed to store the data of a vvs trip Attributes: Name Type Description duration int Time needed for the entire trip in minutes connections list [ Connection ] All connections that are part of the trip get_latest_connection ( start_station , end_station , arrival_time ) Provides a trip from the start location to the end location before a deadline Parameters: Name Type Description Default start_station str VVS-id for starting station required end_station str VVS-id for end station required arrival_time datetime Latest possible time for arrival required Returns: Type Description Trip | None An object containing all the information about the trip get_maps_connection ( start_location , end_location , mode ) Provides the distance and duration for a trip with a specific transportation type Parameters: Name Type Description Default start_location str Name of the location the trip starts required end_location str Name of the location the trip ends required mode MapsTripMode Type of transportation. Possible values: 'driving', 'walking', 'bicycling' or 'transit' required Returns: Type Description MapsTrip A MapsTrip object containing the distance and duration of the trip get_next_connection ( start_station , end_station ) Provides the next trip from the start location to the end location Parameters: Name Type Description Default start_station str VVS-id for starting station required end_station str VVS-id for end station required Returns: Type Description Trip | None An object containing all the information about the trip","title":"Navigation"},{"location":"api/navigation/#navigation","text":"","title":"Navigation"},{"location":"api/navigation/#aswe.api.navigation.Connection","text":"Dataclass supposed to store the data of a single vvs connection Attributes: Name Type Description train_name str Name of the train start_location str Name of the starting location start_time datetime Departure time of the train end_lcocation str Name of the end location end_time datetime Arrival time of the train","title":"Connection"},{"location":"api/navigation/#aswe.api.navigation.MapsTrip","text":"Dataclass supposed to store the data of a connection retrieved from google maps Attributes: Name Type Description duration int Duration in minutes distance int Distance in meters","title":"MapsTrip"},{"location":"api/navigation/#aswe.api.navigation.MapsTripMode","text":"Bases: str , Enum Enum for google maps api trip modes","title":"MapsTripMode"},{"location":"api/navigation/#aswe.api.navigation.Trip","text":"Dataclass supposed to store the data of a vvs trip Attributes: Name Type Description duration int Time needed for the entire trip in minutes connections list [ Connection ] All connections that are part of the trip","title":"Trip"},{"location":"api/navigation/#aswe.api.navigation.get_latest_connection","text":"Provides a trip from the start location to the end location before a deadline Parameters: Name Type Description Default start_station str VVS-id for starting station required end_station str VVS-id for end station required arrival_time datetime Latest possible time for arrival required Returns: Type Description Trip | None An object containing all the information about the trip","title":"get_latest_connection()"},{"location":"api/navigation/#aswe.api.navigation.get_maps_connection","text":"Provides the distance and duration for a trip with a specific transportation type Parameters: Name Type Description Default start_location str Name of the location the trip starts required end_location str Name of the location the trip ends required mode MapsTripMode Type of transportation. Possible values: 'driving', 'walking', 'bicycling' or 'transit' required Returns: Type Description MapsTrip A MapsTrip object containing the distance and duration of the trip","title":"get_maps_connection()"},{"location":"api/navigation/#aswe.api.navigation.get_next_connection","text":"Provides the next trip from the start location to the end location Parameters: Name Type Description Default start_station str VVS-id for starting station required end_station str VVS-id for end station required Returns: Type Description Trip | None An object containing all the information about the trip","title":"get_next_connection()"},{"location":"api/news/","text":"News keyword_search ( keyword , max_results = 3 ) Get the top headlines for a keyword Parameters: Name Type Description Default keyword str Keyword which the news will be about required max_results int , optional Number of news articles that will be returned. By default 3 . 3 Returns: Type Description list [ str ] | None Return a list of strings with the news articles top_headlines_search ( country = 'us' , max_results = 3 ) Get the top headlines of a country Parameters: Name Type Description Default country str , optional Name of the country the news will be about. By default us . 'us' max_results int , optional Number of news article returned. By default 3 . 3 Returns: Type Description list [ str ] | None Return a list of strings with the news articles","title":"News"},{"location":"api/news/#news","text":"","title":"News"},{"location":"api/news/#aswe.api.news.keyword_search","text":"Get the top headlines for a keyword Parameters: Name Type Description Default keyword str Keyword which the news will be about required max_results int , optional Number of news articles that will be returned. By default 3 . 3 Returns: Type Description list [ str ] | None Return a list of strings with the news articles","title":"keyword_search()"},{"location":"api/news/#aswe.api.news.top_headlines_search","text":"Get the top headlines of a country Parameters: Name Type Description Default country str , optional Name of the country the news will be about. By default us . 'us' max_results int , optional Number of news article returned. By default 3 . 3 Returns: Type Description list [ str ] | None Return a list of strings with the news articles","title":"top_headlines_search()"},{"location":"api/sport/","text":"Sport Basketball get_nba_standings () Get the current standings of the NBA Returns: Type Description list [ list [ str ]] | None List of the standings of both eastern and western conference get_nba_teams () Get all NBA teams Returns: Type Description list [ str ] | None List of all NBA teams get_team_game_today ( team_name ) Get the game of a team today Parameters: Name Type Description Default team_name str Name of the team for which a game is to be returned required Returns: Type Description list [ str ] | None Return list with the game of the team on the current day get_team_id ( team_name ) Get the id of a team Parameters: Name Type Description Default team_name str Name of the team for which an id is to be returned required Returns: Type Description int | None description F1 get_results_by_round ( year , round_num ) Get f1 results by round Parameters: Name Type Description Default year int Year of the season in which the race took place required round_num int Number of the race in the season required Returns: Type Description list [ str ] | None Returns a list of strings with the results get_results_last_round () Get results of last round Returns: Type Description list [ str ] | None Returns a list of strings with the results of the last round get_results_next_round () Get information about the next round Returns: Type Description list [ str ] | None Returns a list of strings with information about the next round Football convert_league_name ( name ) Converts the name of the league to the code used by the API Parameters: Name Type Description Default name str Name of the league required Returns: Type Description str | None Return id of the league get_current_team_match ( league , team_name ) Get the current match of the specified team Parameters: Name Type Description Default league str Name of the league required team_name str Name of the team from which the match is requested required Returns: Type Description list [ str ] | None Return list of the current match of the specified team get_league_standings ( league ) Get the standings of the league Parameters: Name Type Description Default league str Name of the league required Returns: Type Description list [ str ] | None Return list of the standings get_matchday_matches ( league , matchday ) Get the matches of the specified matchday Parameters: Name Type Description Default league str Name of the league required matchday int Number of the matchday required Returns: Type Description list [ str ] | None Return list of the matches on that matchday get_matches_today ( league = '' ) Get the matches that are being played today Parameters: Name Type Description Default league str , optional Name of the league. By default \"\" . '' Returns: Type Description list [ str ] | None List of the matches on the current day in the specified league get_ongoing_matches ( league = '' ) Get the ongoing matches in the specified league Parameters: Name Type Description Default league str , optional Name of the league. By default \"\" . '' Returns: Type Description list [ str ] | None List of the ongoing matches in the specified league get_teams ( league ) Get the teams of the specified league Parameters: Name Type Description Default league str Name of the league required Returns: Type Description list [ str | int ] | None Return list of the teams of the specified league get_upcoming_team_matches ( league , team_name , num_matches = 3 ) Get the upcoming matches of the specified team Parameters: Name Type Description Default league str Name of the league required team_name str Name of the team from which the matches are requested required num_matches int , optional Number of matches which will be returned. By default 3 . 3 Returns: Type Description list [ str ] | None Return list of the upcoming matches of the specified team Handball get_league_id ( league_name ) Get league id from league name Parameters: Name Type Description Default league_name str Name of the league required Returns: Type Description int | None Return the id of the league get_league_table ( league_name = 'Bundesliga' ) Get the league table of a league Parameters: Name Type Description Default league_name str , optional Name of the league for which a table is returned. By default Bundesliga . 'Bundesliga' Returns: Type Description list [ str ] | None Return a list of strings with the league table get_league_teams ( league_name ) Get the league teams of a league Parameters: Name Type Description Default league_name str Name of the league for which the teams are returned required Returns: Type Description list [ str ] | None Return a list of strings with the teams in the league get_team_game_today ( team_name , league_name = 'Bundesliga' ) Get the game of a team today Parameters: Name Type Description Default team_name str Name of the team for which the game is to be returned required league_name str , optional Name of the league in which the game is to be played. By default Bundesliga . 'Bundesliga' Returns: Type Description list [ str ] | None Return a list of a string with the game get_team_id ( team_name ) Get team id from team name Parameters: Name Type Description Default team_name str Name of the team for which the id is to be returned required Returns: Type Description int | None Return the id of the team","title":"Sport"},{"location":"api/sport/#sport","text":"","title":"Sport"},{"location":"api/sport/#basketball","text":"","title":"Basketball"},{"location":"api/sport/#aswe.api.sport.basketball.get_nba_standings","text":"Get the current standings of the NBA Returns: Type Description list [ list [ str ]] | None List of the standings of both eastern and western conference","title":"get_nba_standings()"},{"location":"api/sport/#aswe.api.sport.basketball.get_nba_teams","text":"Get all NBA teams Returns: Type Description list [ str ] | None List of all NBA teams","title":"get_nba_teams()"},{"location":"api/sport/#aswe.api.sport.basketball.get_team_game_today","text":"Get the game of a team today Parameters: Name Type Description Default team_name str Name of the team for which a game is to be returned required Returns: Type Description list [ str ] | None Return list with the game of the team on the current day","title":"get_team_game_today()"},{"location":"api/sport/#aswe.api.sport.basketball.get_team_id","text":"Get the id of a team Parameters: Name Type Description Default team_name str Name of the team for which an id is to be returned required Returns: Type Description int | None description","title":"get_team_id()"},{"location":"api/sport/#f1","text":"","title":"F1"},{"location":"api/sport/#aswe.api.sport.f1.get_results_by_round","text":"Get f1 results by round Parameters: Name Type Description Default year int Year of the season in which the race took place required round_num int Number of the race in the season required Returns: Type Description list [ str ] | None Returns a list of strings with the results","title":"get_results_by_round()"},{"location":"api/sport/#aswe.api.sport.f1.get_results_last_round","text":"Get results of last round Returns: Type Description list [ str ] | None Returns a list of strings with the results of the last round","title":"get_results_last_round()"},{"location":"api/sport/#aswe.api.sport.f1.get_results_next_round","text":"Get information about the next round Returns: Type Description list [ str ] | None Returns a list of strings with information about the next round","title":"get_results_next_round()"},{"location":"api/sport/#football","text":"","title":"Football"},{"location":"api/sport/#aswe.api.sport.football.convert_league_name","text":"Converts the name of the league to the code used by the API Parameters: Name Type Description Default name str Name of the league required Returns: Type Description str | None Return id of the league","title":"convert_league_name()"},{"location":"api/sport/#aswe.api.sport.football.get_current_team_match","text":"Get the current match of the specified team Parameters: Name Type Description Default league str Name of the league required team_name str Name of the team from which the match is requested required Returns: Type Description list [ str ] | None Return list of the current match of the specified team","title":"get_current_team_match()"},{"location":"api/sport/#aswe.api.sport.football.get_league_standings","text":"Get the standings of the league Parameters: Name Type Description Default league str Name of the league required Returns: Type Description list [ str ] | None Return list of the standings","title":"get_league_standings()"},{"location":"api/sport/#aswe.api.sport.football.get_matchday_matches","text":"Get the matches of the specified matchday Parameters: Name Type Description Default league str Name of the league required matchday int Number of the matchday required Returns: Type Description list [ str ] | None Return list of the matches on that matchday","title":"get_matchday_matches()"},{"location":"api/sport/#aswe.api.sport.football.get_matches_today","text":"Get the matches that are being played today Parameters: Name Type Description Default league str , optional Name of the league. By default \"\" . '' Returns: Type Description list [ str ] | None List of the matches on the current day in the specified league","title":"get_matches_today()"},{"location":"api/sport/#aswe.api.sport.football.get_ongoing_matches","text":"Get the ongoing matches in the specified league Parameters: Name Type Description Default league str , optional Name of the league. By default \"\" . '' Returns: Type Description list [ str ] | None List of the ongoing matches in the specified league","title":"get_ongoing_matches()"},{"location":"api/sport/#aswe.api.sport.football.get_teams","text":"Get the teams of the specified league Parameters: Name Type Description Default league str Name of the league required Returns: Type Description list [ str | int ] | None Return list of the teams of the specified league","title":"get_teams()"},{"location":"api/sport/#aswe.api.sport.football.get_upcoming_team_matches","text":"Get the upcoming matches of the specified team Parameters: Name Type Description Default league str Name of the league required team_name str Name of the team from which the matches are requested required num_matches int , optional Number of matches which will be returned. By default 3 . 3 Returns: Type Description list [ str ] | None Return list of the upcoming matches of the specified team","title":"get_upcoming_team_matches()"},{"location":"api/sport/#handball","text":"","title":"Handball"},{"location":"api/sport/#aswe.api.sport.handball.get_league_id","text":"Get league id from league name Parameters: Name Type Description Default league_name str Name of the league required Returns: Type Description int | None Return the id of the league","title":"get_league_id()"},{"location":"api/sport/#aswe.api.sport.handball.get_league_table","text":"Get the league table of a league Parameters: Name Type Description Default league_name str , optional Name of the league for which a table is returned. By default Bundesliga . 'Bundesliga' Returns: Type Description list [ str ] | None Return a list of strings with the league table","title":"get_league_table()"},{"location":"api/sport/#aswe.api.sport.handball.get_league_teams","text":"Get the league teams of a league Parameters: Name Type Description Default league_name str Name of the league for which the teams are returned required Returns: Type Description list [ str ] | None Return a list of strings with the teams in the league","title":"get_league_teams()"},{"location":"api/sport/#aswe.api.sport.handball.get_team_game_today","text":"Get the game of a team today Parameters: Name Type Description Default team_name str Name of the team for which the game is to be returned required league_name str , optional Name of the league in which the game is to be played. By default Bundesliga . 'Bundesliga' Returns: Type Description list [ str ] | None Return a list of a string with the game","title":"get_team_game_today()"},{"location":"api/sport/#aswe.api.sport.handball.get_team_id","text":"Get team id from team name Parameters: Name Type Description Default team_name str Name of the team for which the id is to be returned required Returns: Type Description int | None Return the id of the team","title":"get_team_id()"},{"location":"api/weather/","text":"Weather Weather UNIT_GROUP : Final [ str ] = 'metric' module-attribute Defines unit system data is converted to. \"metric\" or \"us\". Defaults to \"metric\" _append_api_params ( url , include = None , elements = None ) Appends API params to URL Parameters: Name Type Description Default url str The URL to append the params to. required include list [ IncludeEnum ] | None, optional The list of IncludeEnum values to append to the URL. By default None . None elements list [ ElementsEnum ] | None, optional The list of ElementsEnum values to append to the URL. By default None . None Returns: Type Description str The URL with the appended params. dynamic_range ( location , dynamic_period , include = None , elements = None ) Retrieves dynamic data relative to current date Parameters: Name Type Description Default location str Location format: \"city, country\" Country needs to be in Alpha-2 Code. required dynamic_period DynamicPeriodEnum Dynamic Period. Refer to weather_params.py . required elements list [ ElementsEnum ] | None, optional List of possible properties in a day or hourly data object that should be retrieved from the API. Refer to weather_params.py . By default None . None include list [ IncludeEnum ] | None, optional List of possible information that should be retrieved from the API. Refer to weather_params.py . By default None . None forecast ( location , start_date = None , end_date = None , include = None , elements = None ) Retrieves weather forecast of given location. Parameters: Name Type Description Default location str Location format: \"city, country\" Country needs to be in Alpha-2 Code. required start_date str | None, optional Date format: YYYY-MM-DD , Optional: YYYY-MM-DDThh:mm:ss . None end_date str | None, optional Date format: YYYY-MM-DD , Optional: YYYY-MM-DDThh:mm:ss . None include list [ IncludeEnum ] | None, optional List of possible information that should be retrieved from the API. Refer to weather_params.py . By default None . None elements list [ ElementsEnum ] | None, optional List of possible properties in a day or hourly data object that should be retrieved from the API. Refer to weather_params.py . By default None . None historic_day ( location , date , include = None , elements = None ) Retrieves historic data from a specific day. Parameters: Name Type Description Default location str Location format: \"city, country\" Country needs to be in Alpha-2 Code. required date str Date format: YYYY-MM-DD , Optional: YYYY-MM-DDThh:mm:ss . required elements list [ ElementsEnum ] | None, optional List of possible properties in a day or hourly data object that should be retrieved from the API. Refer to weather_params.py . By default None . None include list [ IncludeEnum ] | None, optional List of possible information that should be retrieved from the API. Refer to weather_params.py . By default None . None historic_range ( location , start_date , end_date , include = None , elements = None ) Retrieves historic data between two given dates. TODO: Check if format is correct ( YYYY-MM-DDThh:mm:ss or YYYY-MM-DDThh:mm:ssZ ) Parameters: Name Type Description Default location str Location format: \"city, country\" Country needs to be in Alpha-2 Code. required start_date str Date format: YYYY-MM-DD , Optional: YYYY-MM-DDThh:mm:ss . required end_date str Date format: YYYY-MM-DD , Optional: YYYY-MM-DDThh:mm:ss . required elements list [ ElementsEnum ] | None, optional List of possible properties in a day or hourly data object that should be retrieved from the API. Refer to weather_params.py . By default None . None include list [ IncludeEnum ] | None, optional List of possible information that should be retrieved from the API. Refer to weather_params.py . By default None . None Enums & Dataclasses DynamicPeriodEnum Bases: str , Enum Enum of possible dynamic periods for weather API LAST_24_HOURS = 'last24hours' class-attribute the 24 hour period ending at the current time (rounded to the currenthour). LAST_WEEKEND = 'lastweekend' class-attribute the last occurrence of the weekend before today's day. Weekend is defined as Saturday and Sunday. Please let us know if you would like additional weekend definitions added. LAST_YEAR = 'lastyear' class-attribute the one year period ending on yesterday's date. MONTH_TO_DATE = 'monthtodate' class-attribute from midnight on the 1st of the current month until the current date time. NEXT_WEEKEND = 'nextweekend' class-attribute the next occurrence of the weekend after today's day. Weekend is defined as Saturday and Sunday. Please let us know if you would like additional weekend definitions added. TODAY = 'today' class-attribute from midnight to the current time at the requested location. YEART_TO_DATE = 'yeartodate' class-attribute from midnight of January 1st of the current year until the current date time. YESTERDAY = 'yesterday' class-attribute from midnight to midnight on yesterday's date. last_weekday ( weekday ) classmethod the last occurrence of the named day of week before today\u2019s day. For example lastsaturday last_x_days ( days_count ) classmethod the period before today's date with a length on the number of days specified. For example last7days or last21days. next_weekday ( weekday ) classmethod the next occurrence of the named day of week after today's day. For example nextsaturday next_x_days ( days_count ) classmethod the period including and after today's date with a length on the number of days specified. For example next7days or next21days. ElementsEnum Bases: str , Enum Enum of possible element parameters for weather API CAPE = 'cape' class-attribute (forecast only) convective available potential energy. This is a numbering indicating amount of energy available to produce thunderstorms. A higher values indicates a more unstable atmosphere capable of creating stronger storms. Values lower than 1000 J/kg indicate generally low instability, between 1000-2500 J/kg medium instability and 2500-4000 J/kg high instability. Values greater than 4000 J/kg indicating an extremely unstable atmosphere. CIN = 'cin' class-attribute (forecast only) convective inhibition. A number representing the level of atmospheric tendency to prevent instability and therefore prevent thunderstorms. CLOUDCOVER = 'cloudcover' class-attribute how much of the sky is covered in cloud ranging from 0-100% CONDITIONS = 'conditions' class-attribute textual representation of the weather conditions. See Weather Data Conditions. DATETIME = 'datetime' class-attribute ISO formatted date, time or datetime value indicating the date and time of the weather data in the local time zone of the requested location DATETIME_EPOCH = 'datetimeEpoch' class-attribute number of seconds since 1st January 1970 in UTC time DEGREE_DAYS = 'degreedays' class-attribute (day only) optional elements indicating the number of degree days for this date. See the degree days API for more information on degree days. To turn degree days and degree day accumulation on, use the elements parameter. For example, elements=datetime,tempmax,tempmin,degreedays,accdegreedays. DESCRIPTION = 'description' class-attribute longer text descriptions suitable for displaying in weather displays. The descriptions combine the main features of the weather for the day such as precipitation or amount of cloud cover. Daily descriptions are provided for historical and forecast days. When the timeline request includes the model forecast period, a seven day outlook description is provided at the root response level. DEW = 'dew' class-attribute dew point temperature FEELSLIKE = 'feelslike' class-attribute what the temperature feels like accounting for heat index or wind chill. Daily values are average values (mean) for the day. FEELSLIKE_MAX = 'feelslikemax' class-attribute (day only) maximum feels like temperature at the location. FEELSLIKE_MIN = 'feelslikemin' class-attribute (day only) minimum feels like temperature at the location. HOURS = 'hours' class-attribute array of hourly weather data objects. This is a child of each of the daily weather object when hours are selected. HUMIDITY = 'humidity' class-attribute relative humidity in % ICON = 'icon' class-attribute a fixed, machine readable summary that can be used to display an icon MOONRISE = 'moonrise' class-attribute (day only, optional) The formatted time of the moonrise (For example \u201c2022-05-23T02:38:10\u201d) MOONSET = 'moonset' class-attribute (day only, optional) The formatted time of the moonset (For example \u201c2022-05-23T13:40:07\u201d) MOONSET_EPOCH = 'moonsetEpoch' class-attribute (day only, optional) moonset time specified as number of seconds since 1st January 1970 in UTC time MOON_PHASE = 'moonphase' class-attribute represents the fractional portion through the current moon lunation cycle ranging from 0 (the new moon) to 0.5 (the full moon) and back to 1 (the next new moon) MOORISE_EPOCH = 'moonriseEpoch' class-attribute (day only, optional) moonrise time specified as number of seconds since 1st January 1970 in UTC time NORMAL = 'normal' class-attribute array of normal weather data values - Each weather data normal is an array of three values representing, in order, the minimum value over the statistical period, the mean value, and the maximum value over the statistical period. OFFSET_SECONDS = 'offsetseconds' class-attribute (hourly only) time zone offset for this weather data object in seconds - This value may change for a location based on daylight saving time observation. PRECIP = 'precip' class-attribute the amount of liquid precipitation that fell or is predicted to fall in the period. This includes the liquid-equivalent amount of any frozen precipitation such as a snow or ice. PRECIP_COVER = 'precipcover' class-attribute (days only) the proportion of hours where there was non-zero precipitation PRECIP_PROB = 'precipprob' class-attribute (forecast only) the likelihood of measurable precipitation ranging from 0% to 100% PRECIP_TYPE = 'preciptype' class-attribute an array indicating the type(s) of precipitation expected or that occurred. Possible values include rain, snow, freezingrain and ice. PRESSURE = 'pressure' class-attribute the sea level atmospheric or barometric pressure in millibars (or hectopascals) SEVERE_RISK = 'severerisk' class-attribute (forecast only) a value between 0 and 100 representing the risk of convective storms (eg thunderstorms, hail and tornadoes). It is a scaled measure that combines a variety of other fields such as the convective available potential energy (CAPE) and convective inhibition (CIN), predicted rain and wind. Typically a value less than 30 indicates a low risk, between 30 and 70 a moderate risk and above 70 a high risk. SNOW = 'snow' class-attribute the amount of snow that fell or is predicted to fall SNOW_DEPTH = 'snowdepth' class-attribute the depth of snow on the ground SOLAR_ENERGY = 'solarenergy' class-attribute (MJ /m2 ) indicates the total energy from the sun that builds up over an hour or day. See the full solar radiation data documentation and Wind and Solar Energy pages . SOLAR_RADIATION = 'solarradiation' class-attribute (W/m2) the solar radiation power at the instantaneous moment of the observation (or forecast prediction). See the full solar radiation data documentation and Wind and Solar Energy pages . SOURCE = 'source' class-attribute the type of weather data used for this weather object. - Values include historical observation (\u201cobs\u201d), forecast (\u201cfcst\u201d), historical forecast (\u201chistfcst\u201d) or statistical forecast (\u201cstats\u201d). If multiple types are used in the same day, \u201ccomb\u201d is used. Today a combination of historical observations and forecast data. STATIONS = 'stations' class-attribute (historical only) the weather stations used when collecting an historical observation record SUNRISE = 'sunrise' class-attribute (day only) The formatted time of the sunrise (For example \u201c2022-05-23T05:50:40\u201d) SUNRISE_EPOCH = 'sunriseEpoch' class-attribute sunrise time specified as number of seconds since 1st January 1970 in UTC time SUNSET = 'sunset' class-attribute The formatted time of the sunset (For example \u201c2022-05-23T20:22:29\u201d) SUNSET_EPOCH = 'sunsetEpoch' class-attribute sunset time specified as number of seconds since 1st January 1970 in UTC time TEMP = 'temp' class-attribute temperature at the location. Daily values are average values (mean) for the day. TEMP_MAX = 'tempmax' class-attribute (day only) maximum temperature at the location. TEMP_MIN = 'tempmin' class-attribute (day only) minimum temperature at the location. TZOFFSET = 'tzoffset' class-attribute the time zone offset in hours. This will only occur in the data object if it is different from the global time zone offset. UV_INDEX = 'uvindex' class-attribute a value between 0 and 10 indicating the level of ultra violet (UV) exposure for that hour or day. 10 represents high level of exposure, and 0 represents no exposure. The UV index is calculated based on amount of short wave solar radiation which in turn is a level the cloudiness, type of cloud, time of day, time of year and location altitude. Daily values represent the maximum value of the hourly values. VISIBILITY = 'visibility' class-attribute distance at which distant objects are visible WIND_DIR = 'winddir' class-attribute direction from which the wind is blowing WIND_GUST = 'windgust' class-attribute instantaneous wind speed at a location - May be empty if it is not significantly higher than the wind speed. Daily values are the maximum hourly value for the day. WIND_SPEED = 'windspeed' class-attribute the sustained wind speed measured as the average windspeed that occurs during the preceding one to two minutes. Daily values are the maximum hourly value for the day. WIND_SPEED_MAX = 'windspeedmax' class-attribute (day only, optional) maximum wind speed over the day. WIND_SPEED_MEAN = 'windspeedmean' class-attribute (day only , optional ) average (mean) wind speed over the day. WIND_SPEED_MIN = 'windspeedmin' class-attribute (day only , optional ) minimum wind speed over the day. IncludeEnum Bases: str , Enum Enum of possible include parameters for weather API ALERTS = 'alerts' class-attribute weather alerts CURRENT = 'current' class-attribute current conditions or conditions at requested time. DAYS = 'days' class-attribute daily data EVENTS = 'events' class-attribute historical events such as a hail, tornadoes, wind damage and earthquakes (not enabled by default) FORECAST = 'fcst' class-attribute forecast based on 16 day models. HOURS = 'hours' class-attribute hourly data OBS = 'obs' class-attribute historical observations from weather stations REMOTE = 'remote' class-attribute historical observations from remote source such as satellite or radar STATS = 'stats' class-attribute historical statistical normals and daily statistical forecast STATS_FORECAST = 'statsfcst' class-attribute use the full statistical forecast information for dates in the future beyond the current model forecast. Permits hourly statistical forecast.","title":"Weather"},{"location":"api/weather/#weather","text":"","title":"Weather"},{"location":"api/weather/#weather_1","text":"","title":"Weather"},{"location":"api/weather/#aswe.api.weather.weather.UNIT_GROUP","text":"Defines unit system data is converted to. \"metric\" or \"us\". Defaults to \"metric\"","title":"UNIT_GROUP"},{"location":"api/weather/#aswe.api.weather.weather._append_api_params","text":"Appends API params to URL Parameters: Name Type Description Default url str The URL to append the params to. required include list [ IncludeEnum ] | None, optional The list of IncludeEnum values to append to the URL. By default None . None elements list [ ElementsEnum ] | None, optional The list of ElementsEnum values to append to the URL. By default None . None Returns: Type Description str The URL with the appended params.","title":"_append_api_params()"},{"location":"api/weather/#aswe.api.weather.weather.dynamic_range","text":"Retrieves dynamic data relative to current date Parameters: Name Type Description Default location str Location format: \"city, country\" Country needs to be in Alpha-2 Code. required dynamic_period DynamicPeriodEnum Dynamic Period. Refer to weather_params.py . required elements list [ ElementsEnum ] | None, optional List of possible properties in a day or hourly data object that should be retrieved from the API. Refer to weather_params.py . By default None . None include list [ IncludeEnum ] | None, optional List of possible information that should be retrieved from the API. Refer to weather_params.py . By default None . None","title":"dynamic_range()"},{"location":"api/weather/#aswe.api.weather.weather.forecast","text":"Retrieves weather forecast of given location. Parameters: Name Type Description Default location str Location format: \"city, country\" Country needs to be in Alpha-2 Code. required start_date str | None, optional Date format: YYYY-MM-DD , Optional: YYYY-MM-DDThh:mm:ss . None end_date str | None, optional Date format: YYYY-MM-DD , Optional: YYYY-MM-DDThh:mm:ss . None include list [ IncludeEnum ] | None, optional List of possible information that should be retrieved from the API. Refer to weather_params.py . By default None . None elements list [ ElementsEnum ] | None, optional List of possible properties in a day or hourly data object that should be retrieved from the API. Refer to weather_params.py . By default None . None","title":"forecast()"},{"location":"api/weather/#aswe.api.weather.weather.historic_day","text":"Retrieves historic data from a specific day. Parameters: Name Type Description Default location str Location format: \"city, country\" Country needs to be in Alpha-2 Code. required date str Date format: YYYY-MM-DD , Optional: YYYY-MM-DDThh:mm:ss . required elements list [ ElementsEnum ] | None, optional List of possible properties in a day or hourly data object that should be retrieved from the API. Refer to weather_params.py . By default None . None include list [ IncludeEnum ] | None, optional List of possible information that should be retrieved from the API. Refer to weather_params.py . By default None . None","title":"historic_day()"},{"location":"api/weather/#aswe.api.weather.weather.historic_range","text":"Retrieves historic data between two given dates. TODO: Check if format is correct ( YYYY-MM-DDThh:mm:ss or YYYY-MM-DDThh:mm:ssZ ) Parameters: Name Type Description Default location str Location format: \"city, country\" Country needs to be in Alpha-2 Code. required start_date str Date format: YYYY-MM-DD , Optional: YYYY-MM-DDThh:mm:ss . required end_date str Date format: YYYY-MM-DD , Optional: YYYY-MM-DDThh:mm:ss . required elements list [ ElementsEnum ] | None, optional List of possible properties in a day or hourly data object that should be retrieved from the API. Refer to weather_params.py . By default None . None include list [ IncludeEnum ] | None, optional List of possible information that should be retrieved from the API. Refer to weather_params.py . By default None . None","title":"historic_range()"},{"location":"api/weather/#enums-dataclasses","text":"","title":"Enums &amp; Dataclasses"},{"location":"api/weather/#aswe.api.weather.weather_params.DynamicPeriodEnum","text":"Bases: str , Enum Enum of possible dynamic periods for weather API","title":"DynamicPeriodEnum"},{"location":"api/weather/#aswe.api.weather.weather_params.DynamicPeriodEnum.LAST_24_HOURS","text":"the 24 hour period ending at the current time (rounded to the currenthour).","title":"LAST_24_HOURS"},{"location":"api/weather/#aswe.api.weather.weather_params.DynamicPeriodEnum.LAST_WEEKEND","text":"the last occurrence of the weekend before today's day. Weekend is defined as Saturday and Sunday. Please let us know if you would like additional weekend definitions added.","title":"LAST_WEEKEND"},{"location":"api/weather/#aswe.api.weather.weather_params.DynamicPeriodEnum.LAST_YEAR","text":"the one year period ending on yesterday's date.","title":"LAST_YEAR"},{"location":"api/weather/#aswe.api.weather.weather_params.DynamicPeriodEnum.MONTH_TO_DATE","text":"from midnight on the 1st of the current month until the current date time.","title":"MONTH_TO_DATE"},{"location":"api/weather/#aswe.api.weather.weather_params.DynamicPeriodEnum.NEXT_WEEKEND","text":"the next occurrence of the weekend after today's day. Weekend is defined as Saturday and Sunday. Please let us know if you would like additional weekend definitions added.","title":"NEXT_WEEKEND"},{"location":"api/weather/#aswe.api.weather.weather_params.DynamicPeriodEnum.TODAY","text":"from midnight to the current time at the requested location.","title":"TODAY"},{"location":"api/weather/#aswe.api.weather.weather_params.DynamicPeriodEnum.YEART_TO_DATE","text":"from midnight of January 1st of the current year until the current date time.","title":"YEART_TO_DATE"},{"location":"api/weather/#aswe.api.weather.weather_params.DynamicPeriodEnum.YESTERDAY","text":"from midnight to midnight on yesterday's date.","title":"YESTERDAY"},{"location":"api/weather/#aswe.api.weather.weather_params.DynamicPeriodEnum.last_weekday","text":"the last occurrence of the named day of week before today\u2019s day. For example lastsaturday","title":"last_weekday()"},{"location":"api/weather/#aswe.api.weather.weather_params.DynamicPeriodEnum.last_x_days","text":"the period before today's date with a length on the number of days specified. For example last7days or last21days.","title":"last_x_days()"},{"location":"api/weather/#aswe.api.weather.weather_params.DynamicPeriodEnum.next_weekday","text":"the next occurrence of the named day of week after today's day. For example nextsaturday","title":"next_weekday()"},{"location":"api/weather/#aswe.api.weather.weather_params.DynamicPeriodEnum.next_x_days","text":"the period including and after today's date with a length on the number of days specified. For example next7days or next21days.","title":"next_x_days()"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum","text":"Bases: str , Enum Enum of possible element parameters for weather API","title":"ElementsEnum"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.CAPE","text":"(forecast only) convective available potential energy. This is a numbering indicating amount of energy available to produce thunderstorms. A higher values indicates a more unstable atmosphere capable of creating stronger storms. Values lower than 1000 J/kg indicate generally low instability, between 1000-2500 J/kg medium instability and 2500-4000 J/kg high instability. Values greater than 4000 J/kg indicating an extremely unstable atmosphere.","title":"CAPE"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.CIN","text":"(forecast only) convective inhibition. A number representing the level of atmospheric tendency to prevent instability and therefore prevent thunderstorms.","title":"CIN"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.CLOUDCOVER","text":"how much of the sky is covered in cloud ranging from 0-100%","title":"CLOUDCOVER"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.CONDITIONS","text":"textual representation of the weather conditions. See Weather Data Conditions.","title":"CONDITIONS"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.DATETIME","text":"ISO formatted date, time or datetime value indicating the date and time of the weather data in the local time zone of the requested location","title":"DATETIME"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.DATETIME_EPOCH","text":"number of seconds since 1st January 1970 in UTC time","title":"DATETIME_EPOCH"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.DEGREE_DAYS","text":"(day only) optional elements indicating the number of degree days for this date. See the degree days API for more information on degree days. To turn degree days and degree day accumulation on, use the elements parameter. For example, elements=datetime,tempmax,tempmin,degreedays,accdegreedays.","title":"DEGREE_DAYS"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.DESCRIPTION","text":"longer text descriptions suitable for displaying in weather displays. The descriptions combine the main features of the weather for the day such as precipitation or amount of cloud cover. Daily descriptions are provided for historical and forecast days. When the timeline request includes the model forecast period, a seven day outlook description is provided at the root response level.","title":"DESCRIPTION"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.DEW","text":"dew point temperature","title":"DEW"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.FEELSLIKE","text":"what the temperature feels like accounting for heat index or wind chill. Daily values are average values (mean) for the day.","title":"FEELSLIKE"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.FEELSLIKE_MAX","text":"(day only) maximum feels like temperature at the location.","title":"FEELSLIKE_MAX"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.FEELSLIKE_MIN","text":"(day only) minimum feels like temperature at the location.","title":"FEELSLIKE_MIN"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.HOURS","text":"array of hourly weather data objects. This is a child of each of the daily weather object when hours are selected.","title":"HOURS"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.HUMIDITY","text":"relative humidity in %","title":"HUMIDITY"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.ICON","text":"a fixed, machine readable summary that can be used to display an icon","title":"ICON"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.MOONRISE","text":"(day only, optional) The formatted time of the moonrise (For example \u201c2022-05-23T02:38:10\u201d)","title":"MOONRISE"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.MOONSET","text":"(day only, optional) The formatted time of the moonset (For example \u201c2022-05-23T13:40:07\u201d)","title":"MOONSET"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.MOONSET_EPOCH","text":"(day only, optional) moonset time specified as number of seconds since 1st January 1970 in UTC time","title":"MOONSET_EPOCH"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.MOON_PHASE","text":"represents the fractional portion through the current moon lunation cycle ranging from 0 (the new moon) to 0.5 (the full moon) and back to 1 (the next new moon)","title":"MOON_PHASE"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.MOORISE_EPOCH","text":"(day only, optional) moonrise time specified as number of seconds since 1st January 1970 in UTC time","title":"MOORISE_EPOCH"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.NORMAL","text":"array of normal weather data values - Each weather data normal is an array of three values representing, in order, the minimum value over the statistical period, the mean value, and the maximum value over the statistical period.","title":"NORMAL"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.OFFSET_SECONDS","text":"(hourly only) time zone offset for this weather data object in seconds - This value may change for a location based on daylight saving time observation.","title":"OFFSET_SECONDS"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.PRECIP","text":"the amount of liquid precipitation that fell or is predicted to fall in the period. This includes the liquid-equivalent amount of any frozen precipitation such as a snow or ice.","title":"PRECIP"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.PRECIP_COVER","text":"(days only) the proportion of hours where there was non-zero precipitation","title":"PRECIP_COVER"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.PRECIP_PROB","text":"(forecast only) the likelihood of measurable precipitation ranging from 0% to 100%","title":"PRECIP_PROB"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.PRECIP_TYPE","text":"an array indicating the type(s) of precipitation expected or that occurred. Possible values include rain, snow, freezingrain and ice.","title":"PRECIP_TYPE"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.PRESSURE","text":"the sea level atmospheric or barometric pressure in millibars (or hectopascals)","title":"PRESSURE"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.SEVERE_RISK","text":"(forecast only) a value between 0 and 100 representing the risk of convective storms (eg thunderstorms, hail and tornadoes). It is a scaled measure that combines a variety of other fields such as the convective available potential energy (CAPE) and convective inhibition (CIN), predicted rain and wind. Typically a value less than 30 indicates a low risk, between 30 and 70 a moderate risk and above 70 a high risk.","title":"SEVERE_RISK"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.SNOW","text":"the amount of snow that fell or is predicted to fall","title":"SNOW"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.SNOW_DEPTH","text":"the depth of snow on the ground","title":"SNOW_DEPTH"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.SOLAR_ENERGY","text":"(MJ /m2 ) indicates the total energy from the sun that builds up over an hour or day. See the full solar radiation data documentation and Wind and Solar Energy pages .","title":"SOLAR_ENERGY"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.SOLAR_RADIATION","text":"(W/m2) the solar radiation power at the instantaneous moment of the observation (or forecast prediction). See the full solar radiation data documentation and Wind and Solar Energy pages .","title":"SOLAR_RADIATION"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.SOURCE","text":"the type of weather data used for this weather object. - Values include historical observation (\u201cobs\u201d), forecast (\u201cfcst\u201d), historical forecast (\u201chistfcst\u201d) or statistical forecast (\u201cstats\u201d). If multiple types are used in the same day, \u201ccomb\u201d is used. Today a combination of historical observations and forecast data.","title":"SOURCE"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.STATIONS","text":"(historical only) the weather stations used when collecting an historical observation record","title":"STATIONS"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.SUNRISE","text":"(day only) The formatted time of the sunrise (For example \u201c2022-05-23T05:50:40\u201d)","title":"SUNRISE"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.SUNRISE_EPOCH","text":"sunrise time specified as number of seconds since 1st January 1970 in UTC time","title":"SUNRISE_EPOCH"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.SUNSET","text":"The formatted time of the sunset (For example \u201c2022-05-23T20:22:29\u201d)","title":"SUNSET"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.SUNSET_EPOCH","text":"sunset time specified as number of seconds since 1st January 1970 in UTC time","title":"SUNSET_EPOCH"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.TEMP","text":"temperature at the location. Daily values are average values (mean) for the day.","title":"TEMP"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.TEMP_MAX","text":"(day only) maximum temperature at the location.","title":"TEMP_MAX"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.TEMP_MIN","text":"(day only) minimum temperature at the location.","title":"TEMP_MIN"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.TZOFFSET","text":"the time zone offset in hours. This will only occur in the data object if it is different from the global time zone offset.","title":"TZOFFSET"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.UV_INDEX","text":"a value between 0 and 10 indicating the level of ultra violet (UV) exposure for that hour or day. 10 represents high level of exposure, and 0 represents no exposure. The UV index is calculated based on amount of short wave solar radiation which in turn is a level the cloudiness, type of cloud, time of day, time of year and location altitude. Daily values represent the maximum value of the hourly values.","title":"UV_INDEX"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.VISIBILITY","text":"distance at which distant objects are visible","title":"VISIBILITY"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.WIND_DIR","text":"direction from which the wind is blowing","title":"WIND_DIR"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.WIND_GUST","text":"instantaneous wind speed at a location - May be empty if it is not significantly higher than the wind speed. Daily values are the maximum hourly value for the day.","title":"WIND_GUST"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.WIND_SPEED","text":"the sustained wind speed measured as the average windspeed that occurs during the preceding one to two minutes. Daily values are the maximum hourly value for the day.","title":"WIND_SPEED"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.WIND_SPEED_MAX","text":"(day only, optional) maximum wind speed over the day.","title":"WIND_SPEED_MAX"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.WIND_SPEED_MEAN","text":"(day only , optional ) average (mean) wind speed over the day.","title":"WIND_SPEED_MEAN"},{"location":"api/weather/#aswe.api.weather.weather_params.ElementsEnum.WIND_SPEED_MIN","text":"(day only , optional ) minimum wind speed over the day.","title":"WIND_SPEED_MIN"},{"location":"api/weather/#aswe.api.weather.weather_params.IncludeEnum","text":"Bases: str , Enum Enum of possible include parameters for weather API","title":"IncludeEnum"},{"location":"api/weather/#aswe.api.weather.weather_params.IncludeEnum.ALERTS","text":"weather alerts","title":"ALERTS"},{"location":"api/weather/#aswe.api.weather.weather_params.IncludeEnum.CURRENT","text":"current conditions or conditions at requested time.","title":"CURRENT"},{"location":"api/weather/#aswe.api.weather.weather_params.IncludeEnum.DAYS","text":"daily data","title":"DAYS"},{"location":"api/weather/#aswe.api.weather.weather_params.IncludeEnum.EVENTS","text":"historical events such as a hail, tornadoes, wind damage and earthquakes (not enabled by default)","title":"EVENTS"},{"location":"api/weather/#aswe.api.weather.weather_params.IncludeEnum.FORECAST","text":"forecast based on 16 day models.","title":"FORECAST"},{"location":"api/weather/#aswe.api.weather.weather_params.IncludeEnum.HOURS","text":"hourly data","title":"HOURS"},{"location":"api/weather/#aswe.api.weather.weather_params.IncludeEnum.OBS","text":"historical observations from weather stations","title":"OBS"},{"location":"api/weather/#aswe.api.weather.weather_params.IncludeEnum.REMOTE","text":"historical observations from remote source such as satellite or radar","title":"REMOTE"},{"location":"api/weather/#aswe.api.weather.weather_params.IncludeEnum.STATS","text":"historical statistical normals and daily statistical forecast","title":"STATS"},{"location":"api/weather/#aswe.api.weather.weather_params.IncludeEnum.STATS_FORECAST","text":"use the full statistical forecast information for dates in the future beyond the current model forecast. Permits hourly statistical forecast.","title":"STATS_FORECAST"},{"location":"use_cases/event/","text":"Event EventUseCase Bases: AbstractUseCase Use case to handle events _ask_for_event_city () Ask user in which city to search for events Returns: Type Description str Possible cities: [\"Stuttgart\", \"Berlin\", \"Koeln\", \"Muenchen\", \"Dortmund\"] _determine_trip_medium ( event_summary ) Determines which `MapsTripMode to use depending on trip duration and user possessions. If the trip via walking is longer than 45 min then the user should, depending on possessions, use MapsTripMode.DRIVING or MapsTripMode.TRANSIT Parameters: Name Type Description Default event_summary EventSummary Used event to determine trip duration required Returns: Type Description Tuple [ MapsTrip , MapsTripMode ] Trip and Medium user should use _event_is_attendable ( event , calendar_events ) Checks whether a single event can be attended Parameters: Name Type Description Default event ReducedEvent single event retrieved from aswe.api.event.event.events required calendar_events list [ Any ] retrieved calendar events from aswe.api.calendar.calendar.get_events_by_timeframe required Returns: Type Description bool whether event can be attended _format_event_summary ( event_summary ) Formats event summary to a readable string Parameters: Name Type Description Default event_summary EventSummary Short event summary required Returns: Type Description str Single string that can be read by assistant _get_attendable_events ( raw_events , calendar_events ) Checks whether or not given events can be attended depending on existing events in the users calendar. Parameters: Name Type Description Default raw_events list [ ReducedEvent ] retrieved events from aswe.api.event.event.events required calendar_events list [ Event ] retrieved calendar events from aswe.api.calendar.calendar.get_events_by_timeframe required Returns: Type Description list [ EventSummary ] List of short summaries of events that can be attended. _get_event_summary ( event ) Collects short summary about event using weather & gmaps api TODO: Fix typing for event Parameters: Name Type Description Default event Any raw event information required Returns: Type Description dict [ str , Any ] short summary of given event which can be formatted to readable string _get_event_times ( event , event_duration = 2 ) Gets start and end time of event TODO: Extract function as util Parameters: Name Type Description Default event ReducedEvent single event required event_duration int , optional configurable duration in hours event should have. By default 2 . 2 Returns: Type Description Tuple [ datetime , datetime ] start and end datetime of given event _get_events_in_preferred_city ( start_datetime , end_datetime ) Asks user for preferred city and searches for events in given city. Parameters: Name Type Description Default start_datetime datetime Start of timeframe assistant should look for events required end_datetime datetime End of timeframe assistant should look for events required Returns: Type Description list [ ReducedEvent ] List of events in given timeframe check_proactivity () Check if there are any events in the next 30 minutes and trigger the assistant trigger_assistant ( best_match ) UseCase for events TODO: Implement quotes_key Parameters: Name Type Description Default best_match BestMatch An object containing the best match for the user input. required Raises: Type Description NotImplementedError If the given key was not found in the match case statement for implemented functions, or if the function is not implemented yet.","title":"Event"},{"location":"use_cases/event/#event","text":"","title":"Event"},{"location":"use_cases/event/#aswe.use_cases.event.EventUseCase","text":"Bases: AbstractUseCase Use case to handle events","title":"EventUseCase"},{"location":"use_cases/event/#aswe.use_cases.event.EventUseCase._ask_for_event_city","text":"Ask user in which city to search for events Returns: Type Description str Possible cities: [\"Stuttgart\", \"Berlin\", \"Koeln\", \"Muenchen\", \"Dortmund\"]","title":"_ask_for_event_city()"},{"location":"use_cases/event/#aswe.use_cases.event.EventUseCase._determine_trip_medium","text":"Determines which `MapsTripMode to use depending on trip duration and user possessions. If the trip via walking is longer than 45 min then the user should, depending on possessions, use MapsTripMode.DRIVING or MapsTripMode.TRANSIT Parameters: Name Type Description Default event_summary EventSummary Used event to determine trip duration required Returns: Type Description Tuple [ MapsTrip , MapsTripMode ] Trip and Medium user should use","title":"_determine_trip_medium()"},{"location":"use_cases/event/#aswe.use_cases.event.EventUseCase._event_is_attendable","text":"Checks whether a single event can be attended Parameters: Name Type Description Default event ReducedEvent single event retrieved from aswe.api.event.event.events required calendar_events list [ Any ] retrieved calendar events from aswe.api.calendar.calendar.get_events_by_timeframe required Returns: Type Description bool whether event can be attended","title":"_event_is_attendable()"},{"location":"use_cases/event/#aswe.use_cases.event.EventUseCase._format_event_summary","text":"Formats event summary to a readable string Parameters: Name Type Description Default event_summary EventSummary Short event summary required Returns: Type Description str Single string that can be read by assistant","title":"_format_event_summary()"},{"location":"use_cases/event/#aswe.use_cases.event.EventUseCase._get_attendable_events","text":"Checks whether or not given events can be attended depending on existing events in the users calendar. Parameters: Name Type Description Default raw_events list [ ReducedEvent ] retrieved events from aswe.api.event.event.events required calendar_events list [ Event ] retrieved calendar events from aswe.api.calendar.calendar.get_events_by_timeframe required Returns: Type Description list [ EventSummary ] List of short summaries of events that can be attended.","title":"_get_attendable_events()"},{"location":"use_cases/event/#aswe.use_cases.event.EventUseCase._get_event_summary","text":"Collects short summary about event using weather & gmaps api TODO: Fix typing for event Parameters: Name Type Description Default event Any raw event information required Returns: Type Description dict [ str , Any ] short summary of given event which can be formatted to readable string","title":"_get_event_summary()"},{"location":"use_cases/event/#aswe.use_cases.event.EventUseCase._get_event_times","text":"Gets start and end time of event TODO: Extract function as util Parameters: Name Type Description Default event ReducedEvent single event required event_duration int , optional configurable duration in hours event should have. By default 2 . 2 Returns: Type Description Tuple [ datetime , datetime ] start and end datetime of given event","title":"_get_event_times()"},{"location":"use_cases/event/#aswe.use_cases.event.EventUseCase._get_events_in_preferred_city","text":"Asks user for preferred city and searches for events in given city. Parameters: Name Type Description Default start_datetime datetime Start of timeframe assistant should look for events required end_datetime datetime End of timeframe assistant should look for events required Returns: Type Description list [ ReducedEvent ] List of events in given timeframe","title":"_get_events_in_preferred_city()"},{"location":"use_cases/event/#aswe.use_cases.event.EventUseCase.check_proactivity","text":"Check if there are any events in the next 30 minutes and trigger the assistant","title":"check_proactivity()"},{"location":"use_cases/event/#aswe.use_cases.event.EventUseCase.trigger_assistant","text":"UseCase for events TODO: Implement quotes_key Parameters: Name Type Description Default best_match BestMatch An object containing the best match for the user input. required Raises: Type Description NotImplementedError If the given key was not found in the match case statement for implemented functions, or if the function is not implemented yet.","title":"trigger_assistant()"},{"location":"use_cases/general/","text":"General GeneralUseCase Bases: AbstractUseCase Class for managing the general use case check_proactivity () Check if there is a proactivity to be triggered Currently the general use case does not have any proactivity. trigger_assistant ( best_match ) UseCase for general questions The general use case aims to answer general questions like the most popular ones asked Google assistant. This use case also includes the option to exit the assistant. Parameters: Name Type Description Default best_match BestMatch The best matching key for the given user input. required Raises: Type Description NotImplementedError If the given key was not found in the match case statement for implemented functions, or if the function is not implemented yet.","title":"General"},{"location":"use_cases/general/#general","text":"","title":"General"},{"location":"use_cases/general/#aswe.use_cases.general.GeneralUseCase","text":"Bases: AbstractUseCase Class for managing the general use case","title":"GeneralUseCase"},{"location":"use_cases/general/#aswe.use_cases.general.GeneralUseCase.check_proactivity","text":"Check if there is a proactivity to be triggered Currently the general use case does not have any proactivity.","title":"check_proactivity()"},{"location":"use_cases/general/#aswe.use_cases.general.GeneralUseCase.trigger_assistant","text":"UseCase for general questions The general use case aims to answer general questions like the most popular ones asked Google assistant. This use case also includes the option to exit the assistant. Parameters: Name Type Description Default best_match BestMatch The best matching key for the given user input. required Raises: Type Description NotImplementedError If the given key was not found in the match case statement for implemented functions, or if the function is not implemented yet.","title":"trigger_assistant()"},{"location":"use_cases/morning_briefing/","text":"Morning Briefing MorningBriefingUseCase Bases: AbstractUseCase Use case for the morning briefing _calendar_overview () Summarizes the calendar events for the current day _finance_overview () Reads out the stock prices, changes, ratings for the user's favorite stocks _news_overview () Reads out the top headlines for the current day including articles related to the user's keywords _news_sentiment_info ( stock ) Reads out the relevant headlines and their sentiment for a given stock _weather_overview () Reads out the weather forecast for the current day check_proactivity () Check if there is a proactivity to be triggered. full_briefing () Provides an overview of the calendar, news, weather and finance for the current day trigger_assistant ( best_match ) UseCase for morning briefing Parameters: Name Type Description Default best_match BestMatch An object containing the best match for the user input. required Raises: Type Description NotImplementedError If the given key was not found in the match case statement for implemented functions, or if the function is not implemented yet.","title":"Morning Briefing"},{"location":"use_cases/morning_briefing/#morning-briefing","text":"","title":"Morning Briefing"},{"location":"use_cases/morning_briefing/#aswe.use_cases.morning_briefing.MorningBriefingUseCase","text":"Bases: AbstractUseCase Use case for the morning briefing","title":"MorningBriefingUseCase"},{"location":"use_cases/morning_briefing/#aswe.use_cases.morning_briefing.MorningBriefingUseCase._calendar_overview","text":"Summarizes the calendar events for the current day","title":"_calendar_overview()"},{"location":"use_cases/morning_briefing/#aswe.use_cases.morning_briefing.MorningBriefingUseCase._finance_overview","text":"Reads out the stock prices, changes, ratings for the user's favorite stocks","title":"_finance_overview()"},{"location":"use_cases/morning_briefing/#aswe.use_cases.morning_briefing.MorningBriefingUseCase._news_overview","text":"Reads out the top headlines for the current day including articles related to the user's keywords","title":"_news_overview()"},{"location":"use_cases/morning_briefing/#aswe.use_cases.morning_briefing.MorningBriefingUseCase._news_sentiment_info","text":"Reads out the relevant headlines and their sentiment for a given stock","title":"_news_sentiment_info()"},{"location":"use_cases/morning_briefing/#aswe.use_cases.morning_briefing.MorningBriefingUseCase._weather_overview","text":"Reads out the weather forecast for the current day","title":"_weather_overview()"},{"location":"use_cases/morning_briefing/#aswe.use_cases.morning_briefing.MorningBriefingUseCase.check_proactivity","text":"Check if there is a proactivity to be triggered.","title":"check_proactivity()"},{"location":"use_cases/morning_briefing/#aswe.use_cases.morning_briefing.MorningBriefingUseCase.full_briefing","text":"Provides an overview of the calendar, news, weather and finance for the current day","title":"full_briefing()"},{"location":"use_cases/morning_briefing/#aswe.use_cases.morning_briefing.MorningBriefingUseCase.trigger_assistant","text":"UseCase for morning briefing Parameters: Name Type Description Default best_match BestMatch An object containing the best match for the user input. required Raises: Type Description NotImplementedError If the given key was not found in the match case statement for implemented functions, or if the function is not implemented yet.","title":"trigger_assistant()"},{"location":"use_cases/navigation/","text":"Navigation NavigationUseCase Bases: AbstractUseCase Use case for navigation check_proactivity () Trigger proactivity if the next event is between 40 and 45 minutes in the future next_event_use_case () Executes nextEvent use case trigger_assistant ( best_match ) UseCase for navigation Parameters: Name Type Description Default best_match BestMatch An object containing the best match for the user input. required Raises: Type Description NotImplementedError If the given key was not found in the match case statement for implemented functions, or if the function is not implemented yet. vvs_trip_use_case ( end_vvs_location , end_maps_location ) Execute use case with given end vvs-id Parameters: Name Type Description Default end_vvs_location str vvs-id of end location required end_maps_location str name of end location required weather_good_enough_for_bike () Checks if the weather is good enough for the bike Returns: Type Description bool if weather is good enough","title":"Navigation"},{"location":"use_cases/navigation/#navigation","text":"","title":"Navigation"},{"location":"use_cases/navigation/#aswe.use_cases.navigation.NavigationUseCase","text":"Bases: AbstractUseCase Use case for navigation","title":"NavigationUseCase"},{"location":"use_cases/navigation/#aswe.use_cases.navigation.NavigationUseCase.check_proactivity","text":"Trigger proactivity if the next event is between 40 and 45 minutes in the future","title":"check_proactivity()"},{"location":"use_cases/navigation/#aswe.use_cases.navigation.NavigationUseCase.next_event_use_case","text":"Executes nextEvent use case","title":"next_event_use_case()"},{"location":"use_cases/navigation/#aswe.use_cases.navigation.NavigationUseCase.trigger_assistant","text":"UseCase for navigation Parameters: Name Type Description Default best_match BestMatch An object containing the best match for the user input. required Raises: Type Description NotImplementedError If the given key was not found in the match case statement for implemented functions, or if the function is not implemented yet.","title":"trigger_assistant()"},{"location":"use_cases/navigation/#aswe.use_cases.navigation.NavigationUseCase.vvs_trip_use_case","text":"Execute use case with given end vvs-id Parameters: Name Type Description Default end_vvs_location str vvs-id of end location required end_maps_location str name of end location required","title":"vvs_trip_use_case()"},{"location":"use_cases/navigation/#aswe.use_cases.navigation.NavigationUseCase.weather_good_enough_for_bike","text":"Checks if the weather is good enough for the bike Returns: Type Description bool if weather is good enough","title":"weather_good_enough_for_bike()"},{"location":"use_cases/sport/","text":"Sport SportUseCase Bases: AbstractUseCase Use case for sports check_proactivity () Check if there is a proactivity to be triggered TODO: Why is it necessary to check if valid_teams is None twice? choose_league ( leagues ) Returns the league the users chooses. TODO: Refactor by using print_options and get_int Returns: Type Description str The league the user chooses. choose_team ( teams ) Returns the team the users chooses. TODO: Refactor by using print_options and get_int Returns: Type Description str The team the user chooses. get_matchday_num ( max_num ) Returns the matchday number the user chooses. TODO: Refactor by using print_options and get_int Parameters: Name Type Description Default max_num int The maximum number of matchdays. required Returns: Type Description int The matchday number the user chooses. trigger_assistant ( best_match ) UseCase for sport TODO: Implement quotes_key TODO: Fix typing (remove type ignore) TODO: Refactor try except blocks to only include the api call Parameters: Name Type Description Default best_match BestMatch An object containing the best match for the user input. required Raises: Type Description NotImplementedError If the given key was not found in the match case statement for implemented functions, or if the function is not implemented yet.","title":"Sport"},{"location":"use_cases/sport/#sport","text":"","title":"Sport"},{"location":"use_cases/sport/#aswe.use_cases.sport.SportUseCase","text":"Bases: AbstractUseCase Use case for sports","title":"SportUseCase"},{"location":"use_cases/sport/#aswe.use_cases.sport.SportUseCase.check_proactivity","text":"Check if there is a proactivity to be triggered TODO: Why is it necessary to check if valid_teams is None twice?","title":"check_proactivity()"},{"location":"use_cases/sport/#aswe.use_cases.sport.SportUseCase.choose_league","text":"Returns the league the users chooses. TODO: Refactor by using print_options and get_int Returns: Type Description str The league the user chooses.","title":"choose_league()"},{"location":"use_cases/sport/#aswe.use_cases.sport.SportUseCase.choose_team","text":"Returns the team the users chooses. TODO: Refactor by using print_options and get_int Returns: Type Description str The team the user chooses.","title":"choose_team()"},{"location":"use_cases/sport/#aswe.use_cases.sport.SportUseCase.get_matchday_num","text":"Returns the matchday number the user chooses. TODO: Refactor by using print_options and get_int Parameters: Name Type Description Default max_num int The maximum number of matchdays. required Returns: Type Description int The matchday number the user chooses.","title":"get_matchday_num()"},{"location":"use_cases/sport/#aswe.use_cases.sport.SportUseCase.trigger_assistant","text":"UseCase for sport TODO: Implement quotes_key TODO: Fix typing (remove type ignore) TODO: Refactor try except blocks to only include the api call Parameters: Name Type Description Default best_match BestMatch An object containing the best match for the user input. required Raises: Type Description NotImplementedError If the given key was not found in the match case statement for implemented functions, or if the function is not implemented yet.","title":"trigger_assistant()"}]}